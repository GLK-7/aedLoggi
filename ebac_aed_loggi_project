{"metadata":{"colab":{"name":"module_17_exercise.ipynb","provenance":[],"collapsed_sections":[],"toc_visible":true,"authorship_tag":"ABX9TyO58SjEKvZru6fhTie9JEM/"},"kernelspec":{"name":"python3","display_name":"Python 3","language":"python"},"language_info":{"name":"python","version":"3.10.13","mimetype":"text/x-python","codemirror_mode":{"name":"ipython","version":3},"pygments_lexer":"ipython3","nbconvert_exporter":"python","file_extension":".py"},"kaggle":{"accelerator":"none","dataSources":[{"sourceId":9125035,"sourceType":"datasetVersion","datasetId":5508877}],"dockerImageVersionId":30746,"isInternetEnabled":false,"language":"python","sourceType":"notebook","isGpuEnabled":false}},"nbformat_minor":4,"nbformat":4,"cells":[{"cell_type":"markdown","source":"<img src=\"https://raw.githubusercontent.com/andre-marcos-perez/ebac-course-utils/main/media/logo/newebac_logo_black_half.png\" alt=\"ebac-logo\">\n\n---\n\nCaderno de **Exercícios**<br> \nProfessor [André Perez](https://www.linkedin.com/in/andremarcosperez/)\n\n---","metadata":{"id":"KJqp9AANOCtf"}},{"cell_type":"markdown","source":"# **Tópicos**\n\n<ol type=\"1\">\n  <li>Manipulação;</li>\n  <li>Visualização;</li>\n  <li>Storytelling.</li>\n</ol>\n","metadata":{"id":"d9jDtUbDOE1-"}},{"cell_type":"markdown","source":"---","metadata":{"id":"zMN1Q3jdwoJm"}},{"cell_type":"markdown","source":"# **Análise Exploratória de Dados de Logística - Empresa Loggi**\n","metadata":{"id":"QRcqbpLpFK5o"}},{"cell_type":"markdown","source":"## 1\\. Contexto","metadata":{"id":"6-CvdKwqFPiW"}},{"cell_type":"markdown","source":"<img width=\"250px\" src=\"https://upload.wikimedia.org/wikipedia/commons/thumb/6/67/Imagem_Logo_Completo_Azul.png/800px-Imagem_Logo_Completo_Azul.png\" alt=\"loggi-logo\"> \n\nA Loggi é uma startup brasileira de tecnologia, que se tornou um unicórnio, especializada em logística. Iniciou suas atividades entregando documentos entre 2013 e 2014. Em 2016, expandiu seus serviços para o e-commerce e, a partir de 2017, passou a atuar também no segmento de entregas de alimentos.\n\n\nNeste projeto, realizaremos uma análise das entregas feitas pela empresa no Distrito Federal. Ao longo deste caderno, exploraremos, reorganizaremos e estruturaremos os dados para que possam ser visualizados de forma clara e compreensível. Dessa maneira, será possível extrair insights valiosos a partir das informações apresentadas.","metadata":{}},{"cell_type":"markdown","source":"## 2\\. Pacotes e bibliotecas","metadata":{"id":"QxukLHaqFnkU"}},{"cell_type":"markdown","source":"Para iniciar faremos a importação das bibliotecas necessárias para a execução.","metadata":{}},{"cell_type":"code","source":"!pip3 install geopy\n!pip3 install numpy\n\nimport pandas as pd\nimport csv\nimport geopandas as gpd\nimport matplotlib.pyplot as plt\nimport json\nfrom geopy.geocoders import Nominatim\nfrom geopy.extra.rate_limiter import RateLimiter\nimport numpy as np\nimport seaborn as sns","metadata":{"id":"VXUEW0VrF7XW","execution":{"iopub.status.busy":"2024-08-07T13:50:38.526411Z","iopub.execute_input":"2024-08-07T13:50:38.526809Z","iopub.status.idle":"2024-08-07T13:51:49.772829Z","shell.execute_reply.started":"2024-08-07T13:50:38.526779Z","shell.execute_reply":"2024-08-07T13:51:49.771518Z"},"trusted":true},"execution_count":71,"outputs":[{"name":"stdout","text":"Requirement already satisfied: geopy in /opt/conda/lib/python3.10/site-packages (2.4.1)\nRequirement already satisfied: geographiclib<3,>=1.52 in /opt/conda/lib/python3.10/site-packages (from geopy) (2.0)\nRequirement already satisfied: numpy in /opt/conda/lib/python3.10/site-packages (1.26.4)\n","output_type":"stream"}]},{"cell_type":"markdown","source":"## 3\\. Exploração de dados","metadata":{"id":"irQxHW1zGkdZ"}},{"cell_type":"markdown","source":"#### 3.1 Coleta de Dados","metadata":{}},{"cell_type":"markdown","source":"O dado bruto é um arquivo do tipo `JSON` com uma lista de instâncias de entregas. Cada instância representa um conjunto de **entregas** que devem ser realizadas pelos **veículos** do **hub** regional. Exemplo:","metadata":{}},{"cell_type":"code","source":"[\n  {\n    \"name\": \"cvrp-0-df-0\",\n    \"region\": \"df-0\",\n    \"origin\": {\"lng\": -47.802664728268745, \"lat\": -15.657013854445248},\n    \"vehicle_capacity\": 180,\n    \"deliveries\": [\n      {\n        \"id\": \"ed0993f8cc70d998342f38ee827176dc\",\n        \"point\": {\"lng\": -47.7496622016347, \"lat\": -15.65879313293694},\n        \"size\": 10\n      },\n      {\n        \"id\": \"c7220154adc7a3def8f0b2b8a42677a9\",\n        \"point\": {\"lng\": -47.75887552060412, \"lat\": -15.651440380492554},\n        \"size\": 10\n      },\n      ...\n    ]\n  }\n]\n...\n","metadata":{},"execution_count":null,"outputs":[]},{"cell_type":"markdown","source":"Onde:\n\n - **name**: uma `string` com o nome único da instância;\n - **region**: uma `string` com o nome único da região do **hub**;\n - **origin**: um `dict` com a latitude e longitude da região do **hub**;\n - **vehicle_capacity**: um `int` com a soma da capacidade de carga dos **veículos** do **hub**;\n - **deliveries**: uma `list` de `dict` com as **entregas** que devem ser realizadas.","metadata":{}},{"cell_type":"markdown","source":"Sendo que:\n\n - **id**: uma `string` com o id único da **entrega**;\n - **point**: um `dict` com a latitude e longitude da **entrega**;\n - **size**: um `int` com o tamanho ou a carga que a **entrega** ocupa no **veículo**.","metadata":{}},{"cell_type":"markdown","source":"O dado bruto está num arquivo `JSON` com o nome `deliveries.json`. Abaixo faremos a importação dos dados em um dicionário Python chamado `data` e depois criar um dataframe chamado `deliveries_df` a partir dele:\n","metadata":{}},{"cell_type":"code","source":"# importar arquivo csv para dataframe\n\nwith open('../input/loggi-data/deliveries.json', mode='r', encoding='utf8') as file:\n  data = json.load(file)\n\ndeliveries_df = pd.DataFrame(data)\ndeliveries_df.head()\n","metadata":{"execution":{"iopub.status.busy":"2024-08-07T13:47:22.059061Z","iopub.execute_input":"2024-08-07T13:47:22.059951Z","iopub.status.idle":"2024-08-07T13:47:26.194060Z","shell.execute_reply.started":"2024-08-07T13:47:22.059912Z","shell.execute_reply":"2024-08-07T13:47:26.192853Z"},"trusted":true},"execution_count":47,"outputs":[{"execution_count":47,"output_type":"execute_result","data":{"text/plain":"           name region                                             origin  \\\n0  cvrp-2-df-33   df-2  {'lng': -48.05498915846707, 'lat': -15.8381445...   \n1  cvrp-2-df-73   df-2  {'lng': -48.05498915846707, 'lat': -15.8381445...   \n2  cvrp-2-df-20   df-2  {'lng': -48.05498915846707, 'lat': -15.8381445...   \n3  cvrp-1-df-71   df-1  {'lng': -47.89366206897872, 'lat': -15.8051175...   \n4  cvrp-2-df-87   df-2  {'lng': -48.05498915846707, 'lat': -15.8381445...   \n\n   vehicle_capacity                                         deliveries  \n0               180  [{'id': '313483a19d2f8d65cd5024c8d215cfbd', 'p...  \n1               180  [{'id': 'bf3fc630b1c29601a4caf1bdd474b85', 'po...  \n2               180  [{'id': 'b30f1145a2ba4e0b9ac0162b68d045c3', 'p...  \n3               180  [{'id': 'be3ed547394196c12c7c27c89ac74ed6', 'p...  \n4               180  [{'id': 'a6328fb4dc0654eb28a996a270b0f6e4', 'p...  ","text/html":"<div>\n<style scoped>\n    .dataframe tbody tr th:only-of-type {\n        vertical-align: middle;\n    }\n\n    .dataframe tbody tr th {\n        vertical-align: top;\n    }\n\n    .dataframe thead th {\n        text-align: right;\n    }\n</style>\n<table border=\"1\" class=\"dataframe\">\n  <thead>\n    <tr style=\"text-align: right;\">\n      <th></th>\n      <th>name</th>\n      <th>region</th>\n      <th>origin</th>\n      <th>vehicle_capacity</th>\n      <th>deliveries</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <th>0</th>\n      <td>cvrp-2-df-33</td>\n      <td>df-2</td>\n      <td>{'lng': -48.05498915846707, 'lat': -15.8381445...</td>\n      <td>180</td>\n      <td>[{'id': '313483a19d2f8d65cd5024c8d215cfbd', 'p...</td>\n    </tr>\n    <tr>\n      <th>1</th>\n      <td>cvrp-2-df-73</td>\n      <td>df-2</td>\n      <td>{'lng': -48.05498915846707, 'lat': -15.8381445...</td>\n      <td>180</td>\n      <td>[{'id': 'bf3fc630b1c29601a4caf1bdd474b85', 'po...</td>\n    </tr>\n    <tr>\n      <th>2</th>\n      <td>cvrp-2-df-20</td>\n      <td>df-2</td>\n      <td>{'lng': -48.05498915846707, 'lat': -15.8381445...</td>\n      <td>180</td>\n      <td>[{'id': 'b30f1145a2ba4e0b9ac0162b68d045c3', 'p...</td>\n    </tr>\n    <tr>\n      <th>3</th>\n      <td>cvrp-1-df-71</td>\n      <td>df-1</td>\n      <td>{'lng': -47.89366206897872, 'lat': -15.8051175...</td>\n      <td>180</td>\n      <td>[{'id': 'be3ed547394196c12c7c27c89ac74ed6', 'p...</td>\n    </tr>\n    <tr>\n      <th>4</th>\n      <td>cvrp-2-df-87</td>\n      <td>df-2</td>\n      <td>{'lng': -48.05498915846707, 'lat': -15.8381445...</td>\n      <td>180</td>\n      <td>[{'id': 'a6328fb4dc0654eb28a996a270b0f6e4', 'p...</td>\n    </tr>\n  </tbody>\n</table>\n</div>"},"metadata":{}}]},{"cell_type":"code","source":"# Visualizar tamanho do dataframe\nlen(deliveries_df)","metadata":{"execution":{"iopub.status.busy":"2024-08-07T13:47:30.641117Z","iopub.execute_input":"2024-08-07T13:47:30.641529Z","iopub.status.idle":"2024-08-07T13:47:30.648772Z","shell.execute_reply.started":"2024-08-07T13:47:30.641498Z","shell.execute_reply":"2024-08-07T13:47:30.647634Z"},"trusted":true},"execution_count":48,"outputs":[{"execution_count":48,"output_type":"execute_result","data":{"text/plain":"199"},"metadata":{}}]},{"cell_type":"markdown","source":"Vamos então explorar um exemplo:","metadata":{}},{"cell_type":"code","source":"# Passar dados do dicionário de índice 0 para a variável exemplo\nexample = data[0]","metadata":{"execution":{"iopub.status.busy":"2024-08-07T13:47:36.320978Z","iopub.execute_input":"2024-08-07T13:47:36.321377Z","iopub.status.idle":"2024-08-07T13:47:36.327412Z","shell.execute_reply.started":"2024-08-07T13:47:36.321349Z","shell.execute_reply":"2024-08-07T13:47:36.325990Z"},"trusted":true},"execution_count":49,"outputs":[]},{"cell_type":"code","source":"# Visualizar colunas do exemplo\nprint(example.keys())","metadata":{"execution":{"iopub.status.busy":"2024-08-07T13:47:38.667242Z","iopub.execute_input":"2024-08-07T13:47:38.667643Z","iopub.status.idle":"2024-08-07T13:47:38.674502Z","shell.execute_reply.started":"2024-08-07T13:47:38.667613Z","shell.execute_reply":"2024-08-07T13:47:38.673207Z"},"trusted":true},"execution_count":50,"outputs":[{"name":"stdout","text":"dict_keys(['name', 'region', 'origin', 'vehicle_capacity', 'deliveries'])\n","output_type":"stream"}]},{"cell_type":"code","source":"# Visualizar coluna name\nexample['name']","metadata":{"execution":{"iopub.status.busy":"2024-08-07T13:47:41.249417Z","iopub.execute_input":"2024-08-07T13:47:41.249843Z","iopub.status.idle":"2024-08-07T13:47:41.258550Z","shell.execute_reply.started":"2024-08-07T13:47:41.249811Z","shell.execute_reply":"2024-08-07T13:47:41.257368Z"},"trusted":true},"execution_count":51,"outputs":[{"execution_count":51,"output_type":"execute_result","data":{"text/plain":"'cvrp-2-df-33'"},"metadata":{}}]},{"cell_type":"code","source":"# Visualizar coluna region\nexample['region']","metadata":{"execution":{"iopub.status.busy":"2024-08-07T13:47:43.167008Z","iopub.execute_input":"2024-08-07T13:47:43.167426Z","iopub.status.idle":"2024-08-07T13:47:43.174946Z","shell.execute_reply.started":"2024-08-07T13:47:43.167395Z","shell.execute_reply":"2024-08-07T13:47:43.173687Z"},"trusted":true},"execution_count":52,"outputs":[{"execution_count":52,"output_type":"execute_result","data":{"text/plain":"'df-2'"},"metadata":{}}]},{"cell_type":"markdown","source":" - **Coluna**: origin\n \nObserve que a coluna `origin` contém dados `nested` ou aninhados na estrutura do JSON. Vamos normalizar essa coluna usando uma operação chamada `flatten` ou achatamento, que transforma cada chave do JSON em uma nova coluna. Depois vamos juntar os dados com o conjunto principal e por fim, reorganizar as colunas e renomear os campos de latitude e longitude dos hubs.","metadata":{}},{"cell_type":"code","source":"# Normalizar a coluna aninhada origin\n\nhub_origin_df = pd.json_normalize(deliveries_df[\"origin\"])\n\n# Juntar os dados achatados com o conjunto principal\ndeliveries_df = pd.merge(left=deliveries_df, right=hub_origin_df, how='inner', left_index=True, right_index=True)\ndeliveries_df = deliveries_df.drop(\"origin\", axis=1)\n\n# Reorganizar e renomear colunas\ndeliveries_df = deliveries_df[[\"name\", \"region\", \"lng\", \"lat\", \"vehicle_capacity\", \"deliveries\"]]\ndeliveries_df.rename(columns={\"lng\": \"hub_lng\", \"lat\": \"hub_lat\"}, inplace=True)\n\ndeliveries_df.head()","metadata":{"execution":{"iopub.status.busy":"2024-08-07T13:47:45.625651Z","iopub.execute_input":"2024-08-07T13:47:45.626088Z","iopub.status.idle":"2024-08-07T13:47:46.036675Z","shell.execute_reply.started":"2024-08-07T13:47:45.626054Z","shell.execute_reply":"2024-08-07T13:47:46.035387Z"},"trusted":true},"execution_count":53,"outputs":[{"execution_count":53,"output_type":"execute_result","data":{"text/plain":"           name region    hub_lng    hub_lat  vehicle_capacity  \\\n0  cvrp-2-df-33   df-2 -48.054989 -15.838145               180   \n1  cvrp-2-df-73   df-2 -48.054989 -15.838145               180   \n2  cvrp-2-df-20   df-2 -48.054989 -15.838145               180   \n3  cvrp-1-df-71   df-1 -47.893662 -15.805118               180   \n4  cvrp-2-df-87   df-2 -48.054989 -15.838145               180   \n\n                                          deliveries  \n0  [{'id': '313483a19d2f8d65cd5024c8d215cfbd', 'p...  \n1  [{'id': 'bf3fc630b1c29601a4caf1bdd474b85', 'po...  \n2  [{'id': 'b30f1145a2ba4e0b9ac0162b68d045c3', 'p...  \n3  [{'id': 'be3ed547394196c12c7c27c89ac74ed6', 'p...  \n4  [{'id': 'a6328fb4dc0654eb28a996a270b0f6e4', 'p...  ","text/html":"<div>\n<style scoped>\n    .dataframe tbody tr th:only-of-type {\n        vertical-align: middle;\n    }\n\n    .dataframe tbody tr th {\n        vertical-align: top;\n    }\n\n    .dataframe thead th {\n        text-align: right;\n    }\n</style>\n<table border=\"1\" class=\"dataframe\">\n  <thead>\n    <tr style=\"text-align: right;\">\n      <th></th>\n      <th>name</th>\n      <th>region</th>\n      <th>hub_lng</th>\n      <th>hub_lat</th>\n      <th>vehicle_capacity</th>\n      <th>deliveries</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <th>0</th>\n      <td>cvrp-2-df-33</td>\n      <td>df-2</td>\n      <td>-48.054989</td>\n      <td>-15.838145</td>\n      <td>180</td>\n      <td>[{'id': '313483a19d2f8d65cd5024c8d215cfbd', 'p...</td>\n    </tr>\n    <tr>\n      <th>1</th>\n      <td>cvrp-2-df-73</td>\n      <td>df-2</td>\n      <td>-48.054989</td>\n      <td>-15.838145</td>\n      <td>180</td>\n      <td>[{'id': 'bf3fc630b1c29601a4caf1bdd474b85', 'po...</td>\n    </tr>\n    <tr>\n      <th>2</th>\n      <td>cvrp-2-df-20</td>\n      <td>df-2</td>\n      <td>-48.054989</td>\n      <td>-15.838145</td>\n      <td>180</td>\n      <td>[{'id': 'b30f1145a2ba4e0b9ac0162b68d045c3', 'p...</td>\n    </tr>\n    <tr>\n      <th>3</th>\n      <td>cvrp-1-df-71</td>\n      <td>df-1</td>\n      <td>-47.893662</td>\n      <td>-15.805118</td>\n      <td>180</td>\n      <td>[{'id': 'be3ed547394196c12c7c27c89ac74ed6', 'p...</td>\n    </tr>\n    <tr>\n      <th>4</th>\n      <td>cvrp-2-df-87</td>\n      <td>df-2</td>\n      <td>-48.054989</td>\n      <td>-15.838145</td>\n      <td>180</td>\n      <td>[{'id': 'a6328fb4dc0654eb28a996a270b0f6e4', 'p...</td>\n    </tr>\n  </tbody>\n</table>\n</div>"},"metadata":{}}]},{"cell_type":"markdown","source":" - **Coluna**: deliveries\n \nNote que a coluna `deliveries` contem dados uma lista de dados `nested` ou aninhados na estrutura do JSON. Vamos normalizar a coluna com uma operação conhecida como `explode` ou explosão que transforma cada elemento da lista em uma linha. Por fim, faremos os `flatten` ou achatamento do resultado coluna:","metadata":{}},{"cell_type":"code","source":"# Normalizar a coluna aninhada deliveries com a função explode que expande o campo\ndeliveries_exploded_df = deliveries_df[[\"deliveries\"]].explode(\"deliveries\")\ndeliveries_exploded_df.head()","metadata":{"execution":{"iopub.status.busy":"2024-08-07T13:47:48.924587Z","iopub.execute_input":"2024-08-07T13:47:48.925102Z","iopub.status.idle":"2024-08-07T13:47:49.038195Z","shell.execute_reply.started":"2024-08-07T13:47:48.925066Z","shell.execute_reply":"2024-08-07T13:47:49.036550Z"},"trusted":true},"execution_count":54,"outputs":[{"execution_count":54,"output_type":"execute_result","data":{"text/plain":"                                          deliveries\n0  {'id': '313483a19d2f8d65cd5024c8d215cfbd', 'po...\n0  {'id': '320c94b17aa685c939b3f3244c3099de', 'po...\n0  {'id': '3663b42f4b8decb33059febaba46d5c8', 'po...\n0  {'id': 'e11ab58363c38d6abc90d5fba87b7d7', 'poi...\n0  {'id': '54cb45b7bbbd4e34e7150900f92d7f4b', 'po...","text/html":"<div>\n<style scoped>\n    .dataframe tbody tr th:only-of-type {\n        vertical-align: middle;\n    }\n\n    .dataframe tbody tr th {\n        vertical-align: top;\n    }\n\n    .dataframe thead th {\n        text-align: right;\n    }\n</style>\n<table border=\"1\" class=\"dataframe\">\n  <thead>\n    <tr style=\"text-align: right;\">\n      <th></th>\n      <th>deliveries</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <th>0</th>\n      <td>{'id': '313483a19d2f8d65cd5024c8d215cfbd', 'po...</td>\n    </tr>\n    <tr>\n      <th>0</th>\n      <td>{'id': '320c94b17aa685c939b3f3244c3099de', 'po...</td>\n    </tr>\n    <tr>\n      <th>0</th>\n      <td>{'id': '3663b42f4b8decb33059febaba46d5c8', 'po...</td>\n    </tr>\n    <tr>\n      <th>0</th>\n      <td>{'id': 'e11ab58363c38d6abc90d5fba87b7d7', 'poi...</td>\n    </tr>\n    <tr>\n      <th>0</th>\n      <td>{'id': '54cb45b7bbbd4e34e7150900f92d7f4b', 'po...</td>\n    </tr>\n  </tbody>\n</table>\n</div>"},"metadata":{}}]},{"cell_type":"code","source":"# Normalizar os dados de deliveries\ndeliveries_normalized_df = pd.concat([\n  pd.DataFrame(deliveries_exploded_df[\"deliveries\"].apply(lambda record: record[\"size\"])).rename(columns={\"deliveries\": \"delivery_size\"}),\n  pd.DataFrame(deliveries_exploded_df[\"deliveries\"].apply(lambda record: record[\"point\"][\"lng\"])).rename(columns={\"deliveries\": \"delivery_lng\"}),\n  pd.DataFrame(deliveries_exploded_df[\"deliveries\"].apply(lambda record: record[\"point\"][\"lat\"])).rename(columns={\"deliveries\": \"delivery_lat\"}),\n], axis= 1)\ndeliveries_normalized_df.head()","metadata":{"execution":{"iopub.status.busy":"2024-08-07T13:47:51.159348Z","iopub.execute_input":"2024-08-07T13:47:51.160303Z","iopub.status.idle":"2024-08-07T13:47:52.278421Z","shell.execute_reply.started":"2024-08-07T13:47:51.160265Z","shell.execute_reply":"2024-08-07T13:47:52.277452Z"},"trusted":true},"execution_count":55,"outputs":[{"execution_count":55,"output_type":"execute_result","data":{"text/plain":"   delivery_size  delivery_lng  delivery_lat\n0              9    -48.116189    -15.848929\n0              2    -48.118195    -15.850772\n0              1    -48.112483    -15.847871\n0              2    -48.118023    -15.846471\n0              7    -48.114898    -15.858055","text/html":"<div>\n<style scoped>\n    .dataframe tbody tr th:only-of-type {\n        vertical-align: middle;\n    }\n\n    .dataframe tbody tr th {\n        vertical-align: top;\n    }\n\n    .dataframe thead th {\n        text-align: right;\n    }\n</style>\n<table border=\"1\" class=\"dataframe\">\n  <thead>\n    <tr style=\"text-align: right;\">\n      <th></th>\n      <th>delivery_size</th>\n      <th>delivery_lng</th>\n      <th>delivery_lat</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <th>0</th>\n      <td>9</td>\n      <td>-48.116189</td>\n      <td>-15.848929</td>\n    </tr>\n    <tr>\n      <th>0</th>\n      <td>2</td>\n      <td>-48.118195</td>\n      <td>-15.850772</td>\n    </tr>\n    <tr>\n      <th>0</th>\n      <td>1</td>\n      <td>-48.112483</td>\n      <td>-15.847871</td>\n    </tr>\n    <tr>\n      <th>0</th>\n      <td>2</td>\n      <td>-48.118023</td>\n      <td>-15.846471</td>\n    </tr>\n    <tr>\n      <th>0</th>\n      <td>7</td>\n      <td>-48.114898</td>\n      <td>-15.858055</td>\n    </tr>\n  </tbody>\n</table>\n</div>"},"metadata":{}}]},{"cell_type":"markdown","source":"Com o dados explodidos, vamos normaliza-los para combina-los ao conjunto de dados principal:","metadata":{}},{"cell_type":"code","source":"# Visualizar o tamanho do dataframe deliveries_exploded_df\nlen(deliveries_exploded_df)","metadata":{"execution":{"iopub.status.busy":"2024-08-07T13:47:54.457424Z","iopub.execute_input":"2024-08-07T13:47:54.457813Z","iopub.status.idle":"2024-08-07T13:47:54.465365Z","shell.execute_reply.started":"2024-08-07T13:47:54.457784Z","shell.execute_reply":"2024-08-07T13:47:54.464053Z"},"trusted":true},"execution_count":56,"outputs":[{"execution_count":56,"output_type":"execute_result","data":{"text/plain":"636149"},"metadata":{}}]},{"cell_type":"code","source":"# Visualizar o tamanho do dataframe deliveries_df\nlen(deliveries_df)","metadata":{"execution":{"iopub.status.busy":"2024-08-07T13:47:58.076318Z","iopub.execute_input":"2024-08-07T13:47:58.077123Z","iopub.status.idle":"2024-08-07T13:47:58.084001Z","shell.execute_reply.started":"2024-08-07T13:47:58.077087Z","shell.execute_reply":"2024-08-07T13:47:58.082703Z"},"trusted":true},"execution_count":57,"outputs":[{"execution_count":57,"output_type":"execute_result","data":{"text/plain":"199"},"metadata":{}}]},{"cell_type":"code","source":"# Juntar os dados normalizados de entregas (deliveries) com a tabela principal\ndeliveries_df = deliveries_df.drop(\"deliveries\", axis=1)\ndeliveries_df = pd.merge(left=deliveries_df, right=deliveries_normalized_df, how='right', left_index=True, right_index=True)\ndeliveries_df.reset_index(inplace=True, drop=True)\ndeliveries_df.head()","metadata":{"execution":{"iopub.status.busy":"2024-08-07T13:47:59.845205Z","iopub.execute_input":"2024-08-07T13:47:59.846086Z","iopub.status.idle":"2024-08-07T13:47:59.953089Z","shell.execute_reply.started":"2024-08-07T13:47:59.846047Z","shell.execute_reply":"2024-08-07T13:47:59.951609Z"},"trusted":true},"execution_count":58,"outputs":[{"execution_count":58,"output_type":"execute_result","data":{"text/plain":"           name region    hub_lng    hub_lat  vehicle_capacity  delivery_size  \\\n0  cvrp-2-df-33   df-2 -48.054989 -15.838145               180              9   \n1  cvrp-2-df-33   df-2 -48.054989 -15.838145               180              2   \n2  cvrp-2-df-33   df-2 -48.054989 -15.838145               180              1   \n3  cvrp-2-df-33   df-2 -48.054989 -15.838145               180              2   \n4  cvrp-2-df-33   df-2 -48.054989 -15.838145               180              7   \n\n   delivery_lng  delivery_lat  \n0    -48.116189    -15.848929  \n1    -48.118195    -15.850772  \n2    -48.112483    -15.847871  \n3    -48.118023    -15.846471  \n4    -48.114898    -15.858055  ","text/html":"<div>\n<style scoped>\n    .dataframe tbody tr th:only-of-type {\n        vertical-align: middle;\n    }\n\n    .dataframe tbody tr th {\n        vertical-align: top;\n    }\n\n    .dataframe thead th {\n        text-align: right;\n    }\n</style>\n<table border=\"1\" class=\"dataframe\">\n  <thead>\n    <tr style=\"text-align: right;\">\n      <th></th>\n      <th>name</th>\n      <th>region</th>\n      <th>hub_lng</th>\n      <th>hub_lat</th>\n      <th>vehicle_capacity</th>\n      <th>delivery_size</th>\n      <th>delivery_lng</th>\n      <th>delivery_lat</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <th>0</th>\n      <td>cvrp-2-df-33</td>\n      <td>df-2</td>\n      <td>-48.054989</td>\n      <td>-15.838145</td>\n      <td>180</td>\n      <td>9</td>\n      <td>-48.116189</td>\n      <td>-15.848929</td>\n    </tr>\n    <tr>\n      <th>1</th>\n      <td>cvrp-2-df-33</td>\n      <td>df-2</td>\n      <td>-48.054989</td>\n      <td>-15.838145</td>\n      <td>180</td>\n      <td>2</td>\n      <td>-48.118195</td>\n      <td>-15.850772</td>\n    </tr>\n    <tr>\n      <th>2</th>\n      <td>cvrp-2-df-33</td>\n      <td>df-2</td>\n      <td>-48.054989</td>\n      <td>-15.838145</td>\n      <td>180</td>\n      <td>1</td>\n      <td>-48.112483</td>\n      <td>-15.847871</td>\n    </tr>\n    <tr>\n      <th>3</th>\n      <td>cvrp-2-df-33</td>\n      <td>df-2</td>\n      <td>-48.054989</td>\n      <td>-15.838145</td>\n      <td>180</td>\n      <td>2</td>\n      <td>-48.118023</td>\n      <td>-15.846471</td>\n    </tr>\n    <tr>\n      <th>4</th>\n      <td>cvrp-2-df-33</td>\n      <td>df-2</td>\n      <td>-48.054989</td>\n      <td>-15.838145</td>\n      <td>180</td>\n      <td>7</td>\n      <td>-48.114898</td>\n      <td>-15.858055</td>\n    </tr>\n  </tbody>\n</table>\n</div>"},"metadata":{}}]},{"cell_type":"code","source":"# Visualizar o tamanho do dataframe deliveries_df a fim de se certificar que a tabela continua do mesmo tamanho\nlen(deliveries_df)","metadata":{"execution":{"iopub.status.busy":"2024-08-07T13:48:02.248237Z","iopub.execute_input":"2024-08-07T13:48:02.249032Z","iopub.status.idle":"2024-08-07T13:48:02.256038Z","shell.execute_reply.started":"2024-08-07T13:48:02.248992Z","shell.execute_reply":"2024-08-07T13:48:02.254658Z"},"trusted":true},"execution_count":59,"outputs":[{"execution_count":59,"output_type":"execute_result","data":{"text/plain":"636149"},"metadata":{}}]},{"cell_type":"markdown","source":"Agora vamos analisar a estrutura do nosso conjunto de dados reorganizada.","metadata":{}},{"cell_type":"markdown","source":"#### 3.2 Estrutura","metadata":{}},{"cell_type":"code","source":"# Visualizar a estrutura\ndeliveries_df.shape","metadata":{"execution":{"iopub.status.busy":"2024-08-07T13:48:04.539965Z","iopub.execute_input":"2024-08-07T13:48:04.540508Z","iopub.status.idle":"2024-08-07T13:48:04.550342Z","shell.execute_reply.started":"2024-08-07T13:48:04.540466Z","shell.execute_reply":"2024-08-07T13:48:04.548264Z"},"trusted":true},"execution_count":60,"outputs":[{"execution_count":60,"output_type":"execute_result","data":{"text/plain":"(636149, 8)"},"metadata":{}}]},{"cell_type":"code","source":"# Visualizar as colunas do dataframe\ndeliveries_df.columns","metadata":{"execution":{"iopub.status.busy":"2024-08-07T13:48:12.163608Z","iopub.execute_input":"2024-08-07T13:48:12.163992Z","iopub.status.idle":"2024-08-07T13:48:12.172007Z","shell.execute_reply.started":"2024-08-07T13:48:12.163961Z","shell.execute_reply":"2024-08-07T13:48:12.170742Z"},"trusted":true},"execution_count":61,"outputs":[{"execution_count":61,"output_type":"execute_result","data":{"text/plain":"Index(['name', 'region', 'hub_lng', 'hub_lat', 'vehicle_capacity',\n       'delivery_size', 'delivery_lng', 'delivery_lat'],\n      dtype='object')"},"metadata":{}}]},{"cell_type":"code","source":"# Visualizar os índices\ndeliveries_df.index","metadata":{"execution":{"iopub.status.busy":"2024-08-07T13:48:14.328621Z","iopub.execute_input":"2024-08-07T13:48:14.329021Z","iopub.status.idle":"2024-08-07T13:48:14.336279Z","shell.execute_reply.started":"2024-08-07T13:48:14.328987Z","shell.execute_reply":"2024-08-07T13:48:14.334982Z"},"trusted":true},"execution_count":62,"outputs":[{"execution_count":62,"output_type":"execute_result","data":{"text/plain":"RangeIndex(start=0, stop=636149, step=1)"},"metadata":{}}]},{"cell_type":"code","source":"# Visualizar as informações adicionais do dataframe\ndeliveries_df.info()","metadata":{"execution":{"iopub.status.busy":"2024-08-07T13:48:16.458397Z","iopub.execute_input":"2024-08-07T13:48:16.458791Z","iopub.status.idle":"2024-08-07T13:48:16.613068Z","shell.execute_reply.started":"2024-08-07T13:48:16.458758Z","shell.execute_reply":"2024-08-07T13:48:16.611965Z"},"trusted":true},"execution_count":63,"outputs":[{"name":"stdout","text":"<class 'pandas.core.frame.DataFrame'>\nRangeIndex: 636149 entries, 0 to 636148\nData columns (total 8 columns):\n #   Column            Non-Null Count   Dtype  \n---  ------            --------------   -----  \n 0   name              636149 non-null  object \n 1   region            636149 non-null  object \n 2   hub_lng           636149 non-null  float64\n 3   hub_lat           636149 non-null  float64\n 4   vehicle_capacity  636149 non-null  int64  \n 5   delivery_size     636149 non-null  int64  \n 6   delivery_lng      636149 non-null  float64\n 7   delivery_lat      636149 non-null  float64\ndtypes: float64(4), int64(2), object(2)\nmemory usage: 38.8+ MB\n","output_type":"stream"}]},{"cell_type":"markdown","source":"#### 3.3 Schema","metadata":{}},{"cell_type":"code","source":"# Visualizar 5 linhas do dataframe\ndeliveries_df.head(n=5)","metadata":{"execution":{"iopub.status.busy":"2024-08-07T13:48:23.059081Z","iopub.execute_input":"2024-08-07T13:48:23.059485Z","iopub.status.idle":"2024-08-07T13:48:23.075553Z","shell.execute_reply.started":"2024-08-07T13:48:23.059452Z","shell.execute_reply":"2024-08-07T13:48:23.074227Z"},"trusted":true},"execution_count":64,"outputs":[{"execution_count":64,"output_type":"execute_result","data":{"text/plain":"           name region    hub_lng    hub_lat  vehicle_capacity  delivery_size  \\\n0  cvrp-2-df-33   df-2 -48.054989 -15.838145               180              9   \n1  cvrp-2-df-33   df-2 -48.054989 -15.838145               180              2   \n2  cvrp-2-df-33   df-2 -48.054989 -15.838145               180              1   \n3  cvrp-2-df-33   df-2 -48.054989 -15.838145               180              2   \n4  cvrp-2-df-33   df-2 -48.054989 -15.838145               180              7   \n\n   delivery_lng  delivery_lat  \n0    -48.116189    -15.848929  \n1    -48.118195    -15.850772  \n2    -48.112483    -15.847871  \n3    -48.118023    -15.846471  \n4    -48.114898    -15.858055  ","text/html":"<div>\n<style scoped>\n    .dataframe tbody tr th:only-of-type {\n        vertical-align: middle;\n    }\n\n    .dataframe tbody tr th {\n        vertical-align: top;\n    }\n\n    .dataframe thead th {\n        text-align: right;\n    }\n</style>\n<table border=\"1\" class=\"dataframe\">\n  <thead>\n    <tr style=\"text-align: right;\">\n      <th></th>\n      <th>name</th>\n      <th>region</th>\n      <th>hub_lng</th>\n      <th>hub_lat</th>\n      <th>vehicle_capacity</th>\n      <th>delivery_size</th>\n      <th>delivery_lng</th>\n      <th>delivery_lat</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <th>0</th>\n      <td>cvrp-2-df-33</td>\n      <td>df-2</td>\n      <td>-48.054989</td>\n      <td>-15.838145</td>\n      <td>180</td>\n      <td>9</td>\n      <td>-48.116189</td>\n      <td>-15.848929</td>\n    </tr>\n    <tr>\n      <th>1</th>\n      <td>cvrp-2-df-33</td>\n      <td>df-2</td>\n      <td>-48.054989</td>\n      <td>-15.838145</td>\n      <td>180</td>\n      <td>2</td>\n      <td>-48.118195</td>\n      <td>-15.850772</td>\n    </tr>\n    <tr>\n      <th>2</th>\n      <td>cvrp-2-df-33</td>\n      <td>df-2</td>\n      <td>-48.054989</td>\n      <td>-15.838145</td>\n      <td>180</td>\n      <td>1</td>\n      <td>-48.112483</td>\n      <td>-15.847871</td>\n    </tr>\n    <tr>\n      <th>3</th>\n      <td>cvrp-2-df-33</td>\n      <td>df-2</td>\n      <td>-48.054989</td>\n      <td>-15.838145</td>\n      <td>180</td>\n      <td>2</td>\n      <td>-48.118023</td>\n      <td>-15.846471</td>\n    </tr>\n    <tr>\n      <th>4</th>\n      <td>cvrp-2-df-33</td>\n      <td>df-2</td>\n      <td>-48.054989</td>\n      <td>-15.838145</td>\n      <td>180</td>\n      <td>7</td>\n      <td>-48.114898</td>\n      <td>-15.858055</td>\n    </tr>\n  </tbody>\n</table>\n</div>"},"metadata":{}}]},{"cell_type":"markdown","source":" - Colunas e seus respectivos tipos de dados.","metadata":{}},{"cell_type":"code","source":"# Visualizar tipos de dados\ndeliveries_df.dtypes","metadata":{"execution":{"iopub.status.busy":"2024-08-07T13:48:25.248457Z","iopub.execute_input":"2024-08-07T13:48:25.248886Z","iopub.status.idle":"2024-08-07T13:48:25.257180Z","shell.execute_reply.started":"2024-08-07T13:48:25.248852Z","shell.execute_reply":"2024-08-07T13:48:25.256072Z"},"trusted":true},"execution_count":65,"outputs":[{"execution_count":65,"output_type":"execute_result","data":{"text/plain":"name                 object\nregion               object\nhub_lng             float64\nhub_lat             float64\nvehicle_capacity      int64\ndelivery_size         int64\ndelivery_lng        float64\ndelivery_lat        float64\ndtype: object"},"metadata":{}}]},{"cell_type":"markdown","source":" - Atributos **categóricos**.","metadata":{}},{"cell_type":"code","source":"# Visualizar atributos categóricos\ndeliveries_df.select_dtypes(\"object\").describe().transpose()","metadata":{"execution":{"iopub.status.busy":"2024-08-07T13:48:27.601024Z","iopub.execute_input":"2024-08-07T13:48:27.601432Z","iopub.status.idle":"2024-08-07T13:48:27.961380Z","shell.execute_reply.started":"2024-08-07T13:48:27.601399Z","shell.execute_reply":"2024-08-07T13:48:27.960085Z"},"trusted":true},"execution_count":66,"outputs":[{"execution_count":66,"output_type":"execute_result","data":{"text/plain":"         count unique           top    freq\nname    636149    199  cvrp-1-df-87    5636\nregion  636149      3          df-1  304708","text/html":"<div>\n<style scoped>\n    .dataframe tbody tr th:only-of-type {\n        vertical-align: middle;\n    }\n\n    .dataframe tbody tr th {\n        vertical-align: top;\n    }\n\n    .dataframe thead th {\n        text-align: right;\n    }\n</style>\n<table border=\"1\" class=\"dataframe\">\n  <thead>\n    <tr style=\"text-align: right;\">\n      <th></th>\n      <th>count</th>\n      <th>unique</th>\n      <th>top</th>\n      <th>freq</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <th>name</th>\n      <td>636149</td>\n      <td>199</td>\n      <td>cvrp-1-df-87</td>\n      <td>5636</td>\n    </tr>\n    <tr>\n      <th>region</th>\n      <td>636149</td>\n      <td>3</td>\n      <td>df-1</td>\n      <td>304708</td>\n    </tr>\n  </tbody>\n</table>\n</div>"},"metadata":{}}]},{"cell_type":"markdown","source":" - Atributos **numéricos**.","metadata":{}},{"cell_type":"code","source":"# Visualizar atributos numéricos\ndeliveries_df.drop([\"name\", \"region\"], axis=1).select_dtypes('int64').describe().transpose()","metadata":{"execution":{"iopub.status.busy":"2024-08-07T13:48:29.689498Z","iopub.execute_input":"2024-08-07T13:48:29.689898Z","iopub.status.idle":"2024-08-07T13:48:29.757420Z","shell.execute_reply.started":"2024-08-07T13:48:29.689865Z","shell.execute_reply":"2024-08-07T13:48:29.756210Z"},"trusted":true},"execution_count":67,"outputs":[{"execution_count":67,"output_type":"execute_result","data":{"text/plain":"                     count        mean       std    min    25%    50%    75%  \\\nvehicle_capacity  636149.0  180.000000  0.000000  180.0  180.0  180.0  180.0   \ndelivery_size     636149.0    5.512111  2.874557    1.0    3.0    6.0    8.0   \n\n                    max  \nvehicle_capacity  180.0  \ndelivery_size      10.0  ","text/html":"<div>\n<style scoped>\n    .dataframe tbody tr th:only-of-type {\n        vertical-align: middle;\n    }\n\n    .dataframe tbody tr th {\n        vertical-align: top;\n    }\n\n    .dataframe thead th {\n        text-align: right;\n    }\n</style>\n<table border=\"1\" class=\"dataframe\">\n  <thead>\n    <tr style=\"text-align: right;\">\n      <th></th>\n      <th>count</th>\n      <th>mean</th>\n      <th>std</th>\n      <th>min</th>\n      <th>25%</th>\n      <th>50%</th>\n      <th>75%</th>\n      <th>max</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <th>vehicle_capacity</th>\n      <td>636149.0</td>\n      <td>180.000000</td>\n      <td>0.000000</td>\n      <td>180.0</td>\n      <td>180.0</td>\n      <td>180.0</td>\n      <td>180.0</td>\n      <td>180.0</td>\n    </tr>\n    <tr>\n      <th>delivery_size</th>\n      <td>636149.0</td>\n      <td>5.512111</td>\n      <td>2.874557</td>\n      <td>1.0</td>\n      <td>3.0</td>\n      <td>6.0</td>\n      <td>8.0</td>\n      <td>10.0</td>\n    </tr>\n  </tbody>\n</table>\n</div>"},"metadata":{}}]},{"cell_type":"markdown","source":"#### 3.4 Dados faltantes","metadata":{}},{"cell_type":"markdown","source":"Podem ser eles:\n\n - Vazios (`\"\"`);\n - Nulos (`None`);\n - Não disponíveis ou aplicaveis (`na`, `NA`, etc.);\n - Não numérico (`nan`, `NaN`, `NAN`, etc).","metadata":{}},{"cell_type":"code","source":"# Visualizar dados faltantes\ndeliveries_df.isna().any()","metadata":{"execution":{"iopub.status.busy":"2024-08-07T13:48:32.432577Z","iopub.execute_input":"2024-08-07T13:48:32.432959Z","iopub.status.idle":"2024-08-07T13:48:32.580150Z","shell.execute_reply.started":"2024-08-07T13:48:32.432929Z","shell.execute_reply":"2024-08-07T13:48:32.578880Z"},"trusted":true},"execution_count":68,"outputs":[{"execution_count":68,"output_type":"execute_result","data":{"text/plain":"name                False\nregion              False\nhub_lng             False\nhub_lat             False\nvehicle_capacity    False\ndelivery_size       False\ndelivery_lng        False\ndelivery_lat        False\ndtype: bool"},"metadata":{}}]},{"cell_type":"markdown","source":"## 4\\. Manipulação","metadata":{"id":"98hexQTyJS9I"}},{"cell_type":"markdown","source":"#### 4.1 Enriquecimento:","metadata":{}},{"cell_type":"markdown","source":"- **Geocodificação reversa do hub**\n\nNesta etapa será realizada a **geocodificação reversa** dos hubs de entrega com intuíto de enriquecer os dados trazendo a informações relevantes como nome da cidade e bairro.\n\nA **geocodificação** é o processo que transforma uma localização descrita por um texto (endereço, nome do local, etc.) em sua respectiva coodernada geográfica (latitude e longitude). A **geocodificação reversa** faz o oposto, transforma uma coordenada geográfica de um local em suas respectivas descrições textuais.","metadata":{}},{"cell_type":"code","source":"# Passar dados dos hubs para um dataframe exclusivo e visualizar\nhub_df = deliveries_df[[\"region\", \"hub_lng\", \"hub_lat\"]]\nhub_df = hub_df.drop_duplicates().sort_values(by=\"region\").reset_index(drop=True)\nhub_df.head()","metadata":{"id":"DXU4Ee0QJS9Q","execution":{"iopub.status.busy":"2024-08-07T13:48:35.519117Z","iopub.execute_input":"2024-08-07T13:48:35.519545Z","iopub.status.idle":"2024-08-07T13:48:35.626845Z","shell.execute_reply.started":"2024-08-07T13:48:35.519513Z","shell.execute_reply":"2024-08-07T13:48:35.625721Z"},"trusted":true},"execution_count":69,"outputs":[{"execution_count":69,"output_type":"execute_result","data":{"text/plain":"  region    hub_lng    hub_lat\n0   df-0 -47.802665 -15.657014\n1   df-1 -47.893662 -15.805118\n2   df-2 -48.054989 -15.838145","text/html":"<div>\n<style scoped>\n    .dataframe tbody tr th:only-of-type {\n        vertical-align: middle;\n    }\n\n    .dataframe tbody tr th {\n        vertical-align: top;\n    }\n\n    .dataframe thead th {\n        text-align: right;\n    }\n</style>\n<table border=\"1\" class=\"dataframe\">\n  <thead>\n    <tr style=\"text-align: right;\">\n      <th></th>\n      <th>region</th>\n      <th>hub_lng</th>\n      <th>hub_lat</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <th>0</th>\n      <td>df-0</td>\n      <td>-47.802665</td>\n      <td>-15.657014</td>\n    </tr>\n    <tr>\n      <th>1</th>\n      <td>df-1</td>\n      <td>-47.893662</td>\n      <td>-15.805118</td>\n    </tr>\n    <tr>\n      <th>2</th>\n      <td>df-2</td>\n      <td>-48.054989</td>\n      <td>-15.838145</td>\n    </tr>\n  </tbody>\n</table>\n</div>"},"metadata":{}}]},{"cell_type":"markdown","source":"Empresas como Google, Bing e Yahoo! fornecem **geocodificação** como serviço (e cobram por isso). Existe uma projeto *open source* chamado de [OpenStreetMap](https://www.openstreetmap.org/) que mantem um serviço gratuito de geocodificação chamado [Nominatim](https://nominatim.org/), serviço este que apresenta como limitação a quantia de [uma única consuta por segundo](https://operations.osmfoundation.org/policies/nominatim/). Vamos utilizá-lo através do pacote Python `geopy` para fazer a operação reversa e enriquecer o nosso DataFrame principal.","metadata":{}},{"cell_type":"markdown","source":"Agora vamos aplicar a geocodificação nas coordenadas das três regiões e extrair informações de **cidade** e **bairro**.","metadata":{}},{"cell_type":"code","source":"# Definir um usuario e um limite de tempo para acessar o serviço Nominatim a fim de respeitar o limite de uso\ngeolocator = Nominatim(user_agent=\"ebac_geocoder\")\ngeocoder = RateLimiter(geolocator.reverse, min_delay_seconds=1)\n\n# Fazer operação de geocodificação reversa nas linhas do dataframe\nhub_df[\"coordinates\"] = hub_df[\"hub_lat\"].astype(str)  + \", \" + hub_df[\"hub_lng\"].astype(str) \nhub_df[\"geodata\"] = hub_df[\"coordinates\"].apply(geocoder)\n\nhub_df.head()","metadata":{"execution":{"iopub.status.busy":"2024-08-07T14:02:24.501452Z","iopub.execute_input":"2024-08-07T14:02:24.501960Z","iopub.status.idle":"2024-08-07T14:03:05.062944Z","shell.execute_reply.started":"2024-08-07T14:02:24.501909Z","shell.execute_reply":"2024-08-07T14:03:05.060473Z"},"trusted":true},"execution_count":74,"outputs":[{"traceback":["\u001b[0;31m---------------------------------------------------------------------------\u001b[0m","\u001b[0;31mgaierror\u001b[0m                                  Traceback (most recent call last)","File \u001b[0;32m/opt/conda/lib/python3.10/site-packages/urllib3/connection.py:203\u001b[0m, in \u001b[0;36mHTTPConnection._new_conn\u001b[0;34m(self)\u001b[0m\n\u001b[1;32m    202\u001b[0m \u001b[38;5;28;01mtry\u001b[39;00m:\n\u001b[0;32m--> 203\u001b[0m     sock \u001b[38;5;241m=\u001b[39m \u001b[43mconnection\u001b[49m\u001b[38;5;241;43m.\u001b[39;49m\u001b[43mcreate_connection\u001b[49m\u001b[43m(\u001b[49m\n\u001b[1;32m    204\u001b[0m \u001b[43m        \u001b[49m\u001b[43m(\u001b[49m\u001b[38;5;28;43mself\u001b[39;49m\u001b[38;5;241;43m.\u001b[39;49m\u001b[43m_dns_host\u001b[49m\u001b[43m,\u001b[49m\u001b[43m \u001b[49m\u001b[38;5;28;43mself\u001b[39;49m\u001b[38;5;241;43m.\u001b[39;49m\u001b[43mport\u001b[49m\u001b[43m)\u001b[49m\u001b[43m,\u001b[49m\n\u001b[1;32m    205\u001b[0m \u001b[43m        \u001b[49m\u001b[38;5;28;43mself\u001b[39;49m\u001b[38;5;241;43m.\u001b[39;49m\u001b[43mtimeout\u001b[49m\u001b[43m,\u001b[49m\n\u001b[1;32m    206\u001b[0m \u001b[43m        \u001b[49m\u001b[43msource_address\u001b[49m\u001b[38;5;241;43m=\u001b[39;49m\u001b[38;5;28;43mself\u001b[39;49m\u001b[38;5;241;43m.\u001b[39;49m\u001b[43msource_address\u001b[49m\u001b[43m,\u001b[49m\n\u001b[1;32m    207\u001b[0m \u001b[43m        \u001b[49m\u001b[43msocket_options\u001b[49m\u001b[38;5;241;43m=\u001b[39;49m\u001b[38;5;28;43mself\u001b[39;49m\u001b[38;5;241;43m.\u001b[39;49m\u001b[43msocket_options\u001b[49m\u001b[43m,\u001b[49m\n\u001b[1;32m    208\u001b[0m \u001b[43m    \u001b[49m\u001b[43m)\u001b[49m\n\u001b[1;32m    209\u001b[0m \u001b[38;5;28;01mexcept\u001b[39;00m socket\u001b[38;5;241m.\u001b[39mgaierror \u001b[38;5;28;01mas\u001b[39;00m e:\n","File \u001b[0;32m/opt/conda/lib/python3.10/site-packages/urllib3/util/connection.py:60\u001b[0m, in \u001b[0;36mcreate_connection\u001b[0;34m(address, timeout, source_address, socket_options)\u001b[0m\n\u001b[1;32m     58\u001b[0m     \u001b[38;5;28;01mraise\u001b[39;00m LocationParseError(\u001b[38;5;124mf\u001b[39m\u001b[38;5;124m\"\u001b[39m\u001b[38;5;124m'\u001b[39m\u001b[38;5;132;01m{\u001b[39;00mhost\u001b[38;5;132;01m}\u001b[39;00m\u001b[38;5;124m'\u001b[39m\u001b[38;5;124m, label empty or too long\u001b[39m\u001b[38;5;124m\"\u001b[39m) \u001b[38;5;28;01mfrom\u001b[39;00m \u001b[38;5;28;01mNone\u001b[39;00m\n\u001b[0;32m---> 60\u001b[0m \u001b[38;5;28;01mfor\u001b[39;00m res \u001b[38;5;129;01min\u001b[39;00m \u001b[43msocket\u001b[49m\u001b[38;5;241;43m.\u001b[39;49m\u001b[43mgetaddrinfo\u001b[49m\u001b[43m(\u001b[49m\u001b[43mhost\u001b[49m\u001b[43m,\u001b[49m\u001b[43m \u001b[49m\u001b[43mport\u001b[49m\u001b[43m,\u001b[49m\u001b[43m \u001b[49m\u001b[43mfamily\u001b[49m\u001b[43m,\u001b[49m\u001b[43m \u001b[49m\u001b[43msocket\u001b[49m\u001b[38;5;241;43m.\u001b[39;49m\u001b[43mSOCK_STREAM\u001b[49m\u001b[43m)\u001b[49m:\n\u001b[1;32m     61\u001b[0m     af, socktype, proto, canonname, sa \u001b[38;5;241m=\u001b[39m res\n","File \u001b[0;32m/opt/conda/lib/python3.10/socket.py:955\u001b[0m, in \u001b[0;36mgetaddrinfo\u001b[0;34m(host, port, family, type, proto, flags)\u001b[0m\n\u001b[1;32m    954\u001b[0m addrlist \u001b[38;5;241m=\u001b[39m []\n\u001b[0;32m--> 955\u001b[0m \u001b[38;5;28;01mfor\u001b[39;00m res \u001b[38;5;129;01min\u001b[39;00m \u001b[43m_socket\u001b[49m\u001b[38;5;241;43m.\u001b[39;49m\u001b[43mgetaddrinfo\u001b[49m\u001b[43m(\u001b[49m\u001b[43mhost\u001b[49m\u001b[43m,\u001b[49m\u001b[43m \u001b[49m\u001b[43mport\u001b[49m\u001b[43m,\u001b[49m\u001b[43m \u001b[49m\u001b[43mfamily\u001b[49m\u001b[43m,\u001b[49m\u001b[43m \u001b[49m\u001b[38;5;28;43mtype\u001b[39;49m\u001b[43m,\u001b[49m\u001b[43m \u001b[49m\u001b[43mproto\u001b[49m\u001b[43m,\u001b[49m\u001b[43m \u001b[49m\u001b[43mflags\u001b[49m\u001b[43m)\u001b[49m:\n\u001b[1;32m    956\u001b[0m     af, socktype, proto, canonname, sa \u001b[38;5;241m=\u001b[39m res\n","\u001b[0;31mgaierror\u001b[0m: [Errno -3] Temporary failure in name resolution","\nDuring handling of the above exception, another exception occurred:\n","\u001b[0;31mKeyboardInterrupt\u001b[0m                         Traceback (most recent call last)","Cell \u001b[0;32mIn[74], line 7\u001b[0m\n\u001b[1;32m      5\u001b[0m \u001b[38;5;66;03m# Fazer operação de geocodificação reversa nas linhas do dataframe\u001b[39;00m\n\u001b[1;32m      6\u001b[0m hub_df[\u001b[38;5;124m\"\u001b[39m\u001b[38;5;124mcoordinates\u001b[39m\u001b[38;5;124m\"\u001b[39m] \u001b[38;5;241m=\u001b[39m hub_df[\u001b[38;5;124m\"\u001b[39m\u001b[38;5;124mhub_lat\u001b[39m\u001b[38;5;124m\"\u001b[39m]\u001b[38;5;241m.\u001b[39mastype(\u001b[38;5;28mstr\u001b[39m)  \u001b[38;5;241m+\u001b[39m \u001b[38;5;124m\"\u001b[39m\u001b[38;5;124m, \u001b[39m\u001b[38;5;124m\"\u001b[39m \u001b[38;5;241m+\u001b[39m hub_df[\u001b[38;5;124m\"\u001b[39m\u001b[38;5;124mhub_lng\u001b[39m\u001b[38;5;124m\"\u001b[39m]\u001b[38;5;241m.\u001b[39mastype(\u001b[38;5;28mstr\u001b[39m) \n\u001b[0;32m----> 7\u001b[0m hub_df[\u001b[38;5;124m\"\u001b[39m\u001b[38;5;124mgeodata\u001b[39m\u001b[38;5;124m\"\u001b[39m] \u001b[38;5;241m=\u001b[39m \u001b[43mhub_df\u001b[49m\u001b[43m[\u001b[49m\u001b[38;5;124;43m\"\u001b[39;49m\u001b[38;5;124;43mcoordinates\u001b[39;49m\u001b[38;5;124;43m\"\u001b[39;49m\u001b[43m]\u001b[49m\u001b[38;5;241;43m.\u001b[39;49m\u001b[43mapply\u001b[49m\u001b[43m(\u001b[49m\u001b[43mgeocoder\u001b[49m\u001b[43m)\u001b[49m\n\u001b[1;32m      9\u001b[0m hub_df\u001b[38;5;241m.\u001b[39mhead()\n","File \u001b[0;32m/opt/conda/lib/python3.10/site-packages/pandas/core/series.py:4924\u001b[0m, in \u001b[0;36mSeries.apply\u001b[0;34m(self, func, convert_dtype, args, by_row, **kwargs)\u001b[0m\n\u001b[1;32m   4789\u001b[0m \u001b[38;5;28;01mdef\u001b[39;00m \u001b[38;5;21mapply\u001b[39m(\n\u001b[1;32m   4790\u001b[0m     \u001b[38;5;28mself\u001b[39m,\n\u001b[1;32m   4791\u001b[0m     func: AggFuncType,\n\u001b[0;32m   (...)\u001b[0m\n\u001b[1;32m   4796\u001b[0m     \u001b[38;5;241m*\u001b[39m\u001b[38;5;241m*\u001b[39mkwargs,\n\u001b[1;32m   4797\u001b[0m ) \u001b[38;5;241m-\u001b[39m\u001b[38;5;241m>\u001b[39m DataFrame \u001b[38;5;241m|\u001b[39m Series:\n\u001b[1;32m   4798\u001b[0m \u001b[38;5;250m    \u001b[39m\u001b[38;5;124;03m\"\"\"\u001b[39;00m\n\u001b[1;32m   4799\u001b[0m \u001b[38;5;124;03m    Invoke function on values of Series.\u001b[39;00m\n\u001b[1;32m   4800\u001b[0m \n\u001b[0;32m   (...)\u001b[0m\n\u001b[1;32m   4915\u001b[0m \u001b[38;5;124;03m    dtype: float64\u001b[39;00m\n\u001b[1;32m   4916\u001b[0m \u001b[38;5;124;03m    \"\"\"\u001b[39;00m\n\u001b[1;32m   4917\u001b[0m     \u001b[38;5;28;01mreturn\u001b[39;00m \u001b[43mSeriesApply\u001b[49m\u001b[43m(\u001b[49m\n\u001b[1;32m   4918\u001b[0m \u001b[43m        \u001b[49m\u001b[38;5;28;43mself\u001b[39;49m\u001b[43m,\u001b[49m\n\u001b[1;32m   4919\u001b[0m \u001b[43m        \u001b[49m\u001b[43mfunc\u001b[49m\u001b[43m,\u001b[49m\n\u001b[1;32m   4920\u001b[0m \u001b[43m        \u001b[49m\u001b[43mconvert_dtype\u001b[49m\u001b[38;5;241;43m=\u001b[39;49m\u001b[43mconvert_dtype\u001b[49m\u001b[43m,\u001b[49m\n\u001b[1;32m   4921\u001b[0m \u001b[43m        \u001b[49m\u001b[43mby_row\u001b[49m\u001b[38;5;241;43m=\u001b[39;49m\u001b[43mby_row\u001b[49m\u001b[43m,\u001b[49m\n\u001b[1;32m   4922\u001b[0m \u001b[43m        \u001b[49m\u001b[43margs\u001b[49m\u001b[38;5;241;43m=\u001b[39;49m\u001b[43margs\u001b[49m\u001b[43m,\u001b[49m\n\u001b[1;32m   4923\u001b[0m \u001b[43m        \u001b[49m\u001b[43mkwargs\u001b[49m\u001b[38;5;241;43m=\u001b[39;49m\u001b[43mkwargs\u001b[49m\u001b[43m,\u001b[49m\n\u001b[0;32m-> 4924\u001b[0m \u001b[43m    \u001b[49m\u001b[43m)\u001b[49m\u001b[38;5;241;43m.\u001b[39;49m\u001b[43mapply\u001b[49m\u001b[43m(\u001b[49m\u001b[43m)\u001b[49m\n","File \u001b[0;32m/opt/conda/lib/python3.10/site-packages/pandas/core/apply.py:1427\u001b[0m, in \u001b[0;36mSeriesApply.apply\u001b[0;34m(self)\u001b[0m\n\u001b[1;32m   1424\u001b[0m     \u001b[38;5;28;01mreturn\u001b[39;00m \u001b[38;5;28mself\u001b[39m\u001b[38;5;241m.\u001b[39mapply_compat()\n\u001b[1;32m   1426\u001b[0m \u001b[38;5;66;03m# self.func is Callable\u001b[39;00m\n\u001b[0;32m-> 1427\u001b[0m \u001b[38;5;28;01mreturn\u001b[39;00m \u001b[38;5;28;43mself\u001b[39;49m\u001b[38;5;241;43m.\u001b[39;49m\u001b[43mapply_standard\u001b[49m\u001b[43m(\u001b[49m\u001b[43m)\u001b[49m\n","File \u001b[0;32m/opt/conda/lib/python3.10/site-packages/pandas/core/apply.py:1507\u001b[0m, in \u001b[0;36mSeriesApply.apply_standard\u001b[0;34m(self)\u001b[0m\n\u001b[1;32m   1501\u001b[0m \u001b[38;5;66;03m# row-wise access\u001b[39;00m\n\u001b[1;32m   1502\u001b[0m \u001b[38;5;66;03m# apply doesn't have a `na_action` keyword and for backward compat reasons\u001b[39;00m\n\u001b[1;32m   1503\u001b[0m \u001b[38;5;66;03m# we need to give `na_action=\"ignore\"` for categorical data.\u001b[39;00m\n\u001b[1;32m   1504\u001b[0m \u001b[38;5;66;03m# TODO: remove the `na_action=\"ignore\"` when that default has been changed in\u001b[39;00m\n\u001b[1;32m   1505\u001b[0m \u001b[38;5;66;03m#  Categorical (GH51645).\u001b[39;00m\n\u001b[1;32m   1506\u001b[0m action \u001b[38;5;241m=\u001b[39m \u001b[38;5;124m\"\u001b[39m\u001b[38;5;124mignore\u001b[39m\u001b[38;5;124m\"\u001b[39m \u001b[38;5;28;01mif\u001b[39;00m \u001b[38;5;28misinstance\u001b[39m(obj\u001b[38;5;241m.\u001b[39mdtype, CategoricalDtype) \u001b[38;5;28;01melse\u001b[39;00m \u001b[38;5;28;01mNone\u001b[39;00m\n\u001b[0;32m-> 1507\u001b[0m mapped \u001b[38;5;241m=\u001b[39m \u001b[43mobj\u001b[49m\u001b[38;5;241;43m.\u001b[39;49m\u001b[43m_map_values\u001b[49m\u001b[43m(\u001b[49m\n\u001b[1;32m   1508\u001b[0m \u001b[43m    \u001b[49m\u001b[43mmapper\u001b[49m\u001b[38;5;241;43m=\u001b[39;49m\u001b[43mcurried\u001b[49m\u001b[43m,\u001b[49m\u001b[43m \u001b[49m\u001b[43mna_action\u001b[49m\u001b[38;5;241;43m=\u001b[39;49m\u001b[43maction\u001b[49m\u001b[43m,\u001b[49m\u001b[43m \u001b[49m\u001b[43mconvert\u001b[49m\u001b[38;5;241;43m=\u001b[39;49m\u001b[38;5;28;43mself\u001b[39;49m\u001b[38;5;241;43m.\u001b[39;49m\u001b[43mconvert_dtype\u001b[49m\n\u001b[1;32m   1509\u001b[0m \u001b[43m\u001b[49m\u001b[43m)\u001b[49m\n\u001b[1;32m   1511\u001b[0m \u001b[38;5;28;01mif\u001b[39;00m \u001b[38;5;28mlen\u001b[39m(mapped) \u001b[38;5;129;01mand\u001b[39;00m \u001b[38;5;28misinstance\u001b[39m(mapped[\u001b[38;5;241m0\u001b[39m], ABCSeries):\n\u001b[1;32m   1512\u001b[0m     \u001b[38;5;66;03m# GH#43986 Need to do list(mapped) in order to get treated as nested\u001b[39;00m\n\u001b[1;32m   1513\u001b[0m     \u001b[38;5;66;03m#  See also GH#25959 regarding EA support\u001b[39;00m\n\u001b[1;32m   1514\u001b[0m     \u001b[38;5;28;01mreturn\u001b[39;00m obj\u001b[38;5;241m.\u001b[39m_constructor_expanddim(\u001b[38;5;28mlist\u001b[39m(mapped), index\u001b[38;5;241m=\u001b[39mobj\u001b[38;5;241m.\u001b[39mindex)\n","File \u001b[0;32m/opt/conda/lib/python3.10/site-packages/pandas/core/base.py:921\u001b[0m, in \u001b[0;36mIndexOpsMixin._map_values\u001b[0;34m(self, mapper, na_action, convert)\u001b[0m\n\u001b[1;32m    918\u001b[0m \u001b[38;5;28;01mif\u001b[39;00m \u001b[38;5;28misinstance\u001b[39m(arr, ExtensionArray):\n\u001b[1;32m    919\u001b[0m     \u001b[38;5;28;01mreturn\u001b[39;00m arr\u001b[38;5;241m.\u001b[39mmap(mapper, na_action\u001b[38;5;241m=\u001b[39mna_action)\n\u001b[0;32m--> 921\u001b[0m \u001b[38;5;28;01mreturn\u001b[39;00m \u001b[43malgorithms\u001b[49m\u001b[38;5;241;43m.\u001b[39;49m\u001b[43mmap_array\u001b[49m\u001b[43m(\u001b[49m\u001b[43marr\u001b[49m\u001b[43m,\u001b[49m\u001b[43m \u001b[49m\u001b[43mmapper\u001b[49m\u001b[43m,\u001b[49m\u001b[43m \u001b[49m\u001b[43mna_action\u001b[49m\u001b[38;5;241;43m=\u001b[39;49m\u001b[43mna_action\u001b[49m\u001b[43m,\u001b[49m\u001b[43m \u001b[49m\u001b[43mconvert\u001b[49m\u001b[38;5;241;43m=\u001b[39;49m\u001b[43mconvert\u001b[49m\u001b[43m)\u001b[49m\n","File \u001b[0;32m/opt/conda/lib/python3.10/site-packages/pandas/core/algorithms.py:1743\u001b[0m, in \u001b[0;36mmap_array\u001b[0;34m(arr, mapper, na_action, convert)\u001b[0m\n\u001b[1;32m   1741\u001b[0m values \u001b[38;5;241m=\u001b[39m arr\u001b[38;5;241m.\u001b[39mastype(\u001b[38;5;28mobject\u001b[39m, copy\u001b[38;5;241m=\u001b[39m\u001b[38;5;28;01mFalse\u001b[39;00m)\n\u001b[1;32m   1742\u001b[0m \u001b[38;5;28;01mif\u001b[39;00m na_action \u001b[38;5;129;01mis\u001b[39;00m \u001b[38;5;28;01mNone\u001b[39;00m:\n\u001b[0;32m-> 1743\u001b[0m     \u001b[38;5;28;01mreturn\u001b[39;00m \u001b[43mlib\u001b[49m\u001b[38;5;241;43m.\u001b[39;49m\u001b[43mmap_infer\u001b[49m\u001b[43m(\u001b[49m\u001b[43mvalues\u001b[49m\u001b[43m,\u001b[49m\u001b[43m \u001b[49m\u001b[43mmapper\u001b[49m\u001b[43m,\u001b[49m\u001b[43m \u001b[49m\u001b[43mconvert\u001b[49m\u001b[38;5;241;43m=\u001b[39;49m\u001b[43mconvert\u001b[49m\u001b[43m)\u001b[49m\n\u001b[1;32m   1744\u001b[0m \u001b[38;5;28;01melse\u001b[39;00m:\n\u001b[1;32m   1745\u001b[0m     \u001b[38;5;28;01mreturn\u001b[39;00m lib\u001b[38;5;241m.\u001b[39mmap_infer_mask(\n\u001b[1;32m   1746\u001b[0m         values, mapper, mask\u001b[38;5;241m=\u001b[39misna(values)\u001b[38;5;241m.\u001b[39mview(np\u001b[38;5;241m.\u001b[39muint8), convert\u001b[38;5;241m=\u001b[39mconvert\n\u001b[1;32m   1747\u001b[0m     )\n","File \u001b[0;32mlib.pyx:2972\u001b[0m, in \u001b[0;36mpandas._libs.lib.map_infer\u001b[0;34m()\u001b[0m\n","File \u001b[0;32m/opt/conda/lib/python3.10/site-packages/geopy/extra/rate_limiter.py:274\u001b[0m, in \u001b[0;36mRateLimiter.__call__\u001b[0;34m(self, *args, **kwargs)\u001b[0m\n\u001b[1;32m    272\u001b[0m \u001b[38;5;28mself\u001b[39m\u001b[38;5;241m.\u001b[39m_acquire_request_slot()\n\u001b[1;32m    273\u001b[0m \u001b[38;5;28;01mtry\u001b[39;00m:\n\u001b[0;32m--> 274\u001b[0m     res \u001b[38;5;241m=\u001b[39m \u001b[38;5;28;43mself\u001b[39;49m\u001b[38;5;241;43m.\u001b[39;49m\u001b[43mfunc\u001b[49m\u001b[43m(\u001b[49m\u001b[38;5;241;43m*\u001b[39;49m\u001b[43margs\u001b[49m\u001b[43m,\u001b[49m\u001b[43m \u001b[49m\u001b[38;5;241;43m*\u001b[39;49m\u001b[38;5;241;43m*\u001b[39;49m\u001b[43mkwargs\u001b[49m\u001b[43m)\u001b[49m\n\u001b[1;32m    275\u001b[0m     \u001b[38;5;28;01mif\u001b[39;00m inspect\u001b[38;5;241m.\u001b[39misawaitable(res):\n\u001b[1;32m    276\u001b[0m         \u001b[38;5;28;01mraise\u001b[39;00m \u001b[38;5;167;01mValueError\u001b[39;00m(\n\u001b[1;32m    277\u001b[0m             \u001b[38;5;124m\"\u001b[39m\u001b[38;5;124mAn async awaitable has been passed to `RateLimiter`. \u001b[39m\u001b[38;5;124m\"\u001b[39m\n\u001b[1;32m    278\u001b[0m             \u001b[38;5;124m\"\u001b[39m\u001b[38;5;124mUse `AsyncRateLimiter` instead, which supports awaitables.\u001b[39m\u001b[38;5;124m\"\u001b[39m\n\u001b[1;32m    279\u001b[0m         )\n","File \u001b[0;32m/opt/conda/lib/python3.10/site-packages/geopy/geocoders/nominatim.py:372\u001b[0m, in \u001b[0;36mNominatim.reverse\u001b[0;34m(self, query, exactly_one, timeout, language, addressdetails, zoom, namedetails)\u001b[0m\n\u001b[1;32m    370\u001b[0m logger\u001b[38;5;241m.\u001b[39mdebug(\u001b[38;5;124m\"\u001b[39m\u001b[38;5;132;01m%s\u001b[39;00m\u001b[38;5;124m.reverse: \u001b[39m\u001b[38;5;132;01m%s\u001b[39;00m\u001b[38;5;124m\"\u001b[39m, \u001b[38;5;28mself\u001b[39m\u001b[38;5;241m.\u001b[39m\u001b[38;5;18m__class__\u001b[39m\u001b[38;5;241m.\u001b[39m\u001b[38;5;18m__name__\u001b[39m, url)\n\u001b[1;32m    371\u001b[0m callback \u001b[38;5;241m=\u001b[39m partial(\u001b[38;5;28mself\u001b[39m\u001b[38;5;241m.\u001b[39m_parse_json, exactly_one\u001b[38;5;241m=\u001b[39mexactly_one)\n\u001b[0;32m--> 372\u001b[0m \u001b[38;5;28;01mreturn\u001b[39;00m \u001b[38;5;28;43mself\u001b[39;49m\u001b[38;5;241;43m.\u001b[39;49m\u001b[43m_call_geocoder\u001b[49m\u001b[43m(\u001b[49m\u001b[43murl\u001b[49m\u001b[43m,\u001b[49m\u001b[43m \u001b[49m\u001b[43mcallback\u001b[49m\u001b[43m,\u001b[49m\u001b[43m \u001b[49m\u001b[43mtimeout\u001b[49m\u001b[38;5;241;43m=\u001b[39;49m\u001b[43mtimeout\u001b[49m\u001b[43m)\u001b[49m\n","File \u001b[0;32m/opt/conda/lib/python3.10/site-packages/geopy/geocoders/base.py:368\u001b[0m, in \u001b[0;36mGeocoder._call_geocoder\u001b[0;34m(self, url, callback, timeout, is_json, headers)\u001b[0m\n\u001b[1;32m    366\u001b[0m \u001b[38;5;28;01mtry\u001b[39;00m:\n\u001b[1;32m    367\u001b[0m     \u001b[38;5;28;01mif\u001b[39;00m is_json:\n\u001b[0;32m--> 368\u001b[0m         result \u001b[38;5;241m=\u001b[39m \u001b[38;5;28;43mself\u001b[39;49m\u001b[38;5;241;43m.\u001b[39;49m\u001b[43madapter\u001b[49m\u001b[38;5;241;43m.\u001b[39;49m\u001b[43mget_json\u001b[49m\u001b[43m(\u001b[49m\u001b[43murl\u001b[49m\u001b[43m,\u001b[49m\u001b[43m \u001b[49m\u001b[43mtimeout\u001b[49m\u001b[38;5;241;43m=\u001b[39;49m\u001b[43mtimeout\u001b[49m\u001b[43m,\u001b[49m\u001b[43m \u001b[49m\u001b[43mheaders\u001b[49m\u001b[38;5;241;43m=\u001b[39;49m\u001b[43mreq_headers\u001b[49m\u001b[43m)\u001b[49m\n\u001b[1;32m    369\u001b[0m     \u001b[38;5;28;01melse\u001b[39;00m:\n\u001b[1;32m    370\u001b[0m         result \u001b[38;5;241m=\u001b[39m \u001b[38;5;28mself\u001b[39m\u001b[38;5;241m.\u001b[39madapter\u001b[38;5;241m.\u001b[39mget_text(url, timeout\u001b[38;5;241m=\u001b[39mtimeout, headers\u001b[38;5;241m=\u001b[39mreq_headers)\n","File \u001b[0;32m/opt/conda/lib/python3.10/site-packages/geopy/adapters.py:472\u001b[0m, in \u001b[0;36mRequestsAdapter.get_json\u001b[0;34m(self, url, timeout, headers)\u001b[0m\n\u001b[1;32m    471\u001b[0m \u001b[38;5;28;01mdef\u001b[39;00m \u001b[38;5;21mget_json\u001b[39m(\u001b[38;5;28mself\u001b[39m, url, \u001b[38;5;241m*\u001b[39m, timeout, headers):\n\u001b[0;32m--> 472\u001b[0m     resp \u001b[38;5;241m=\u001b[39m \u001b[38;5;28;43mself\u001b[39;49m\u001b[38;5;241;43m.\u001b[39;49m\u001b[43m_request\u001b[49m\u001b[43m(\u001b[49m\u001b[43murl\u001b[49m\u001b[43m,\u001b[49m\u001b[43m \u001b[49m\u001b[43mtimeout\u001b[49m\u001b[38;5;241;43m=\u001b[39;49m\u001b[43mtimeout\u001b[49m\u001b[43m,\u001b[49m\u001b[43m \u001b[49m\u001b[43mheaders\u001b[49m\u001b[38;5;241;43m=\u001b[39;49m\u001b[43mheaders\u001b[49m\u001b[43m)\u001b[49m\n\u001b[1;32m    473\u001b[0m     \u001b[38;5;28;01mtry\u001b[39;00m:\n\u001b[1;32m    474\u001b[0m         \u001b[38;5;28;01mreturn\u001b[39;00m resp\u001b[38;5;241m.\u001b[39mjson()\n","File \u001b[0;32m/opt/conda/lib/python3.10/site-packages/geopy/adapters.py:482\u001b[0m, in \u001b[0;36mRequestsAdapter._request\u001b[0;34m(self, url, timeout, headers)\u001b[0m\n\u001b[1;32m    480\u001b[0m \u001b[38;5;28;01mdef\u001b[39;00m \u001b[38;5;21m_request\u001b[39m(\u001b[38;5;28mself\u001b[39m, url, \u001b[38;5;241m*\u001b[39m, timeout, headers):\n\u001b[1;32m    481\u001b[0m     \u001b[38;5;28;01mtry\u001b[39;00m:\n\u001b[0;32m--> 482\u001b[0m         resp \u001b[38;5;241m=\u001b[39m \u001b[38;5;28;43mself\u001b[39;49m\u001b[38;5;241;43m.\u001b[39;49m\u001b[43msession\u001b[49m\u001b[38;5;241;43m.\u001b[39;49m\u001b[43mget\u001b[49m\u001b[43m(\u001b[49m\u001b[43murl\u001b[49m\u001b[43m,\u001b[49m\u001b[43m \u001b[49m\u001b[43mtimeout\u001b[49m\u001b[38;5;241;43m=\u001b[39;49m\u001b[43mtimeout\u001b[49m\u001b[43m,\u001b[49m\u001b[43m \u001b[49m\u001b[43mheaders\u001b[49m\u001b[38;5;241;43m=\u001b[39;49m\u001b[43mheaders\u001b[49m\u001b[43m)\u001b[49m\n\u001b[1;32m    483\u001b[0m     \u001b[38;5;28;01mexcept\u001b[39;00m \u001b[38;5;167;01mException\u001b[39;00m \u001b[38;5;28;01mas\u001b[39;00m error:\n\u001b[1;32m    484\u001b[0m         message \u001b[38;5;241m=\u001b[39m \u001b[38;5;28mstr\u001b[39m(error)\n","File \u001b[0;32m/opt/conda/lib/python3.10/site-packages/requests/sessions.py:602\u001b[0m, in \u001b[0;36mSession.get\u001b[0;34m(self, url, **kwargs)\u001b[0m\n\u001b[1;32m    594\u001b[0m \u001b[38;5;250m\u001b[39m\u001b[38;5;124mr\u001b[39m\u001b[38;5;124;03m\"\"\"Sends a GET request. Returns :class:`Response` object.\u001b[39;00m\n\u001b[1;32m    595\u001b[0m \n\u001b[1;32m    596\u001b[0m \u001b[38;5;124;03m:param url: URL for the new :class:`Request` object.\u001b[39;00m\n\u001b[1;32m    597\u001b[0m \u001b[38;5;124;03m:param \\*\\*kwargs: Optional arguments that ``request`` takes.\u001b[39;00m\n\u001b[1;32m    598\u001b[0m \u001b[38;5;124;03m:rtype: requests.Response\u001b[39;00m\n\u001b[1;32m    599\u001b[0m \u001b[38;5;124;03m\"\"\"\u001b[39;00m\n\u001b[1;32m    601\u001b[0m kwargs\u001b[38;5;241m.\u001b[39msetdefault(\u001b[38;5;124m\"\u001b[39m\u001b[38;5;124mallow_redirects\u001b[39m\u001b[38;5;124m\"\u001b[39m, \u001b[38;5;28;01mTrue\u001b[39;00m)\n\u001b[0;32m--> 602\u001b[0m \u001b[38;5;28;01mreturn\u001b[39;00m \u001b[38;5;28;43mself\u001b[39;49m\u001b[38;5;241;43m.\u001b[39;49m\u001b[43mrequest\u001b[49m\u001b[43m(\u001b[49m\u001b[38;5;124;43m\"\u001b[39;49m\u001b[38;5;124;43mGET\u001b[39;49m\u001b[38;5;124;43m\"\u001b[39;49m\u001b[43m,\u001b[49m\u001b[43m \u001b[49m\u001b[43murl\u001b[49m\u001b[43m,\u001b[49m\u001b[43m \u001b[49m\u001b[38;5;241;43m*\u001b[39;49m\u001b[38;5;241;43m*\u001b[39;49m\u001b[43mkwargs\u001b[49m\u001b[43m)\u001b[49m\n","File \u001b[0;32m/opt/conda/lib/python3.10/site-packages/requests/sessions.py:589\u001b[0m, in \u001b[0;36mSession.request\u001b[0;34m(self, method, url, params, data, headers, cookies, files, auth, timeout, allow_redirects, proxies, hooks, stream, verify, cert, json)\u001b[0m\n\u001b[1;32m    584\u001b[0m send_kwargs \u001b[38;5;241m=\u001b[39m {\n\u001b[1;32m    585\u001b[0m     \u001b[38;5;124m\"\u001b[39m\u001b[38;5;124mtimeout\u001b[39m\u001b[38;5;124m\"\u001b[39m: timeout,\n\u001b[1;32m    586\u001b[0m     \u001b[38;5;124m\"\u001b[39m\u001b[38;5;124mallow_redirects\u001b[39m\u001b[38;5;124m\"\u001b[39m: allow_redirects,\n\u001b[1;32m    587\u001b[0m }\n\u001b[1;32m    588\u001b[0m send_kwargs\u001b[38;5;241m.\u001b[39mupdate(settings)\n\u001b[0;32m--> 589\u001b[0m resp \u001b[38;5;241m=\u001b[39m \u001b[38;5;28;43mself\u001b[39;49m\u001b[38;5;241;43m.\u001b[39;49m\u001b[43msend\u001b[49m\u001b[43m(\u001b[49m\u001b[43mprep\u001b[49m\u001b[43m,\u001b[49m\u001b[43m \u001b[49m\u001b[38;5;241;43m*\u001b[39;49m\u001b[38;5;241;43m*\u001b[39;49m\u001b[43msend_kwargs\u001b[49m\u001b[43m)\u001b[49m\n\u001b[1;32m    591\u001b[0m \u001b[38;5;28;01mreturn\u001b[39;00m resp\n","File \u001b[0;32m/opt/conda/lib/python3.10/site-packages/requests/sessions.py:703\u001b[0m, in \u001b[0;36mSession.send\u001b[0;34m(self, request, **kwargs)\u001b[0m\n\u001b[1;32m    700\u001b[0m start \u001b[38;5;241m=\u001b[39m preferred_clock()\n\u001b[1;32m    702\u001b[0m \u001b[38;5;66;03m# Send the request\u001b[39;00m\n\u001b[0;32m--> 703\u001b[0m r \u001b[38;5;241m=\u001b[39m \u001b[43madapter\u001b[49m\u001b[38;5;241;43m.\u001b[39;49m\u001b[43msend\u001b[49m\u001b[43m(\u001b[49m\u001b[43mrequest\u001b[49m\u001b[43m,\u001b[49m\u001b[43m \u001b[49m\u001b[38;5;241;43m*\u001b[39;49m\u001b[38;5;241;43m*\u001b[39;49m\u001b[43mkwargs\u001b[49m\u001b[43m)\u001b[49m\n\u001b[1;32m    705\u001b[0m \u001b[38;5;66;03m# Total elapsed time of the request (approximately)\u001b[39;00m\n\u001b[1;32m    706\u001b[0m elapsed \u001b[38;5;241m=\u001b[39m preferred_clock() \u001b[38;5;241m-\u001b[39m start\n","File \u001b[0;32m/opt/conda/lib/python3.10/site-packages/requests/adapters.py:667\u001b[0m, in \u001b[0;36mHTTPAdapter.send\u001b[0;34m(self, request, stream, timeout, verify, cert, proxies)\u001b[0m\n\u001b[1;32m    664\u001b[0m     timeout \u001b[38;5;241m=\u001b[39m TimeoutSauce(connect\u001b[38;5;241m=\u001b[39mtimeout, read\u001b[38;5;241m=\u001b[39mtimeout)\n\u001b[1;32m    666\u001b[0m \u001b[38;5;28;01mtry\u001b[39;00m:\n\u001b[0;32m--> 667\u001b[0m     resp \u001b[38;5;241m=\u001b[39m \u001b[43mconn\u001b[49m\u001b[38;5;241;43m.\u001b[39;49m\u001b[43murlopen\u001b[49m\u001b[43m(\u001b[49m\n\u001b[1;32m    668\u001b[0m \u001b[43m        \u001b[49m\u001b[43mmethod\u001b[49m\u001b[38;5;241;43m=\u001b[39;49m\u001b[43mrequest\u001b[49m\u001b[38;5;241;43m.\u001b[39;49m\u001b[43mmethod\u001b[49m\u001b[43m,\u001b[49m\n\u001b[1;32m    669\u001b[0m \u001b[43m        \u001b[49m\u001b[43murl\u001b[49m\u001b[38;5;241;43m=\u001b[39;49m\u001b[43murl\u001b[49m\u001b[43m,\u001b[49m\n\u001b[1;32m    670\u001b[0m \u001b[43m        \u001b[49m\u001b[43mbody\u001b[49m\u001b[38;5;241;43m=\u001b[39;49m\u001b[43mrequest\u001b[49m\u001b[38;5;241;43m.\u001b[39;49m\u001b[43mbody\u001b[49m\u001b[43m,\u001b[49m\n\u001b[1;32m    671\u001b[0m \u001b[43m        \u001b[49m\u001b[43mheaders\u001b[49m\u001b[38;5;241;43m=\u001b[39;49m\u001b[43mrequest\u001b[49m\u001b[38;5;241;43m.\u001b[39;49m\u001b[43mheaders\u001b[49m\u001b[43m,\u001b[49m\n\u001b[1;32m    672\u001b[0m \u001b[43m        \u001b[49m\u001b[43mredirect\u001b[49m\u001b[38;5;241;43m=\u001b[39;49m\u001b[38;5;28;43;01mFalse\u001b[39;49;00m\u001b[43m,\u001b[49m\n\u001b[1;32m    673\u001b[0m \u001b[43m        \u001b[49m\u001b[43massert_same_host\u001b[49m\u001b[38;5;241;43m=\u001b[39;49m\u001b[38;5;28;43;01mFalse\u001b[39;49;00m\u001b[43m,\u001b[49m\n\u001b[1;32m    674\u001b[0m \u001b[43m        \u001b[49m\u001b[43mpreload_content\u001b[49m\u001b[38;5;241;43m=\u001b[39;49m\u001b[38;5;28;43;01mFalse\u001b[39;49;00m\u001b[43m,\u001b[49m\n\u001b[1;32m    675\u001b[0m \u001b[43m        \u001b[49m\u001b[43mdecode_content\u001b[49m\u001b[38;5;241;43m=\u001b[39;49m\u001b[38;5;28;43;01mFalse\u001b[39;49;00m\u001b[43m,\u001b[49m\n\u001b[1;32m    676\u001b[0m \u001b[43m        \u001b[49m\u001b[43mretries\u001b[49m\u001b[38;5;241;43m=\u001b[39;49m\u001b[38;5;28;43mself\u001b[39;49m\u001b[38;5;241;43m.\u001b[39;49m\u001b[43mmax_retries\u001b[49m\u001b[43m,\u001b[49m\n\u001b[1;32m    677\u001b[0m \u001b[43m        \u001b[49m\u001b[43mtimeout\u001b[49m\u001b[38;5;241;43m=\u001b[39;49m\u001b[43mtimeout\u001b[49m\u001b[43m,\u001b[49m\n\u001b[1;32m    678\u001b[0m \u001b[43m        \u001b[49m\u001b[43mchunked\u001b[49m\u001b[38;5;241;43m=\u001b[39;49m\u001b[43mchunked\u001b[49m\u001b[43m,\u001b[49m\n\u001b[1;32m    679\u001b[0m \u001b[43m    \u001b[49m\u001b[43m)\u001b[49m\n\u001b[1;32m    681\u001b[0m \u001b[38;5;28;01mexcept\u001b[39;00m (ProtocolError, \u001b[38;5;167;01mOSError\u001b[39;00m) \u001b[38;5;28;01mas\u001b[39;00m err:\n\u001b[1;32m    682\u001b[0m     \u001b[38;5;28;01mraise\u001b[39;00m \u001b[38;5;167;01mConnectionError\u001b[39;00m(err, request\u001b[38;5;241m=\u001b[39mrequest)\n","File \u001b[0;32m/opt/conda/lib/python3.10/site-packages/urllib3/connectionpool.py:874\u001b[0m, in \u001b[0;36mHTTPConnectionPool.urlopen\u001b[0;34m(self, method, url, body, headers, retries, redirect, assert_same_host, timeout, pool_timeout, release_conn, chunked, body_pos, preload_content, decode_content, **response_kw)\u001b[0m\n\u001b[1;32m    869\u001b[0m \u001b[38;5;28;01mif\u001b[39;00m \u001b[38;5;129;01mnot\u001b[39;00m conn:\n\u001b[1;32m    870\u001b[0m     \u001b[38;5;66;03m# Try again\u001b[39;00m\n\u001b[1;32m    871\u001b[0m     log\u001b[38;5;241m.\u001b[39mwarning(\n\u001b[1;32m    872\u001b[0m         \u001b[38;5;124m\"\u001b[39m\u001b[38;5;124mRetrying (\u001b[39m\u001b[38;5;132;01m%r\u001b[39;00m\u001b[38;5;124m) after connection broken by \u001b[39m\u001b[38;5;124m'\u001b[39m\u001b[38;5;132;01m%r\u001b[39;00m\u001b[38;5;124m'\u001b[39m\u001b[38;5;124m: \u001b[39m\u001b[38;5;132;01m%s\u001b[39;00m\u001b[38;5;124m\"\u001b[39m, retries, err, url\n\u001b[1;32m    873\u001b[0m     )\n\u001b[0;32m--> 874\u001b[0m     \u001b[38;5;28;01mreturn\u001b[39;00m \u001b[38;5;28;43mself\u001b[39;49m\u001b[38;5;241;43m.\u001b[39;49m\u001b[43murlopen\u001b[49m\u001b[43m(\u001b[49m\n\u001b[1;32m    875\u001b[0m \u001b[43m        \u001b[49m\u001b[43mmethod\u001b[49m\u001b[43m,\u001b[49m\n\u001b[1;32m    876\u001b[0m \u001b[43m        \u001b[49m\u001b[43murl\u001b[49m\u001b[43m,\u001b[49m\n\u001b[1;32m    877\u001b[0m \u001b[43m        \u001b[49m\u001b[43mbody\u001b[49m\u001b[43m,\u001b[49m\n\u001b[1;32m    878\u001b[0m \u001b[43m        \u001b[49m\u001b[43mheaders\u001b[49m\u001b[43m,\u001b[49m\n\u001b[1;32m    879\u001b[0m \u001b[43m        \u001b[49m\u001b[43mretries\u001b[49m\u001b[43m,\u001b[49m\n\u001b[1;32m    880\u001b[0m \u001b[43m        \u001b[49m\u001b[43mredirect\u001b[49m\u001b[43m,\u001b[49m\n\u001b[1;32m    881\u001b[0m \u001b[43m        \u001b[49m\u001b[43massert_same_host\u001b[49m\u001b[43m,\u001b[49m\n\u001b[1;32m    882\u001b[0m \u001b[43m        \u001b[49m\u001b[43mtimeout\u001b[49m\u001b[38;5;241;43m=\u001b[39;49m\u001b[43mtimeout\u001b[49m\u001b[43m,\u001b[49m\n\u001b[1;32m    883\u001b[0m \u001b[43m        \u001b[49m\u001b[43mpool_timeout\u001b[49m\u001b[38;5;241;43m=\u001b[39;49m\u001b[43mpool_timeout\u001b[49m\u001b[43m,\u001b[49m\n\u001b[1;32m    884\u001b[0m \u001b[43m        \u001b[49m\u001b[43mrelease_conn\u001b[49m\u001b[38;5;241;43m=\u001b[39;49m\u001b[43mrelease_conn\u001b[49m\u001b[43m,\u001b[49m\n\u001b[1;32m    885\u001b[0m \u001b[43m        \u001b[49m\u001b[43mchunked\u001b[49m\u001b[38;5;241;43m=\u001b[39;49m\u001b[43mchunked\u001b[49m\u001b[43m,\u001b[49m\n\u001b[1;32m    886\u001b[0m \u001b[43m        \u001b[49m\u001b[43mbody_pos\u001b[49m\u001b[38;5;241;43m=\u001b[39;49m\u001b[43mbody_pos\u001b[49m\u001b[43m,\u001b[49m\n\u001b[1;32m    887\u001b[0m \u001b[43m        \u001b[49m\u001b[43mpreload_content\u001b[49m\u001b[38;5;241;43m=\u001b[39;49m\u001b[43mpreload_content\u001b[49m\u001b[43m,\u001b[49m\n\u001b[1;32m    888\u001b[0m \u001b[43m        \u001b[49m\u001b[43mdecode_content\u001b[49m\u001b[38;5;241;43m=\u001b[39;49m\u001b[43mdecode_content\u001b[49m\u001b[43m,\u001b[49m\n\u001b[1;32m    889\u001b[0m \u001b[43m        \u001b[49m\u001b[38;5;241;43m*\u001b[39;49m\u001b[38;5;241;43m*\u001b[39;49m\u001b[43mresponse_kw\u001b[49m\u001b[43m,\u001b[49m\n\u001b[1;32m    890\u001b[0m \u001b[43m    \u001b[49m\u001b[43m)\u001b[49m\n\u001b[1;32m    892\u001b[0m \u001b[38;5;66;03m# Handle redirect?\u001b[39;00m\n\u001b[1;32m    893\u001b[0m redirect_location \u001b[38;5;241m=\u001b[39m redirect \u001b[38;5;129;01mand\u001b[39;00m response\u001b[38;5;241m.\u001b[39mget_redirect_location()\n","File \u001b[0;32m/opt/conda/lib/python3.10/site-packages/urllib3/connectionpool.py:790\u001b[0m, in \u001b[0;36mHTTPConnectionPool.urlopen\u001b[0;34m(self, method, url, body, headers, retries, redirect, assert_same_host, timeout, pool_timeout, release_conn, chunked, body_pos, preload_content, decode_content, **response_kw)\u001b[0m\n\u001b[1;32m    787\u001b[0m response_conn \u001b[38;5;241m=\u001b[39m conn \u001b[38;5;28;01mif\u001b[39;00m \u001b[38;5;129;01mnot\u001b[39;00m release_conn \u001b[38;5;28;01melse\u001b[39;00m \u001b[38;5;28;01mNone\u001b[39;00m\n\u001b[1;32m    789\u001b[0m \u001b[38;5;66;03m# Make the request on the HTTPConnection object\u001b[39;00m\n\u001b[0;32m--> 790\u001b[0m response \u001b[38;5;241m=\u001b[39m \u001b[38;5;28;43mself\u001b[39;49m\u001b[38;5;241;43m.\u001b[39;49m\u001b[43m_make_request\u001b[49m\u001b[43m(\u001b[49m\n\u001b[1;32m    791\u001b[0m \u001b[43m    \u001b[49m\u001b[43mconn\u001b[49m\u001b[43m,\u001b[49m\n\u001b[1;32m    792\u001b[0m \u001b[43m    \u001b[49m\u001b[43mmethod\u001b[49m\u001b[43m,\u001b[49m\n\u001b[1;32m    793\u001b[0m \u001b[43m    \u001b[49m\u001b[43murl\u001b[49m\u001b[43m,\u001b[49m\n\u001b[1;32m    794\u001b[0m \u001b[43m    \u001b[49m\u001b[43mtimeout\u001b[49m\u001b[38;5;241;43m=\u001b[39;49m\u001b[43mtimeout_obj\u001b[49m\u001b[43m,\u001b[49m\n\u001b[1;32m    795\u001b[0m \u001b[43m    \u001b[49m\u001b[43mbody\u001b[49m\u001b[38;5;241;43m=\u001b[39;49m\u001b[43mbody\u001b[49m\u001b[43m,\u001b[49m\n\u001b[1;32m    796\u001b[0m \u001b[43m    \u001b[49m\u001b[43mheaders\u001b[49m\u001b[38;5;241;43m=\u001b[39;49m\u001b[43mheaders\u001b[49m\u001b[43m,\u001b[49m\n\u001b[1;32m    797\u001b[0m \u001b[43m    \u001b[49m\u001b[43mchunked\u001b[49m\u001b[38;5;241;43m=\u001b[39;49m\u001b[43mchunked\u001b[49m\u001b[43m,\u001b[49m\n\u001b[1;32m    798\u001b[0m \u001b[43m    \u001b[49m\u001b[43mretries\u001b[49m\u001b[38;5;241;43m=\u001b[39;49m\u001b[43mretries\u001b[49m\u001b[43m,\u001b[49m\n\u001b[1;32m    799\u001b[0m \u001b[43m    \u001b[49m\u001b[43mresponse_conn\u001b[49m\u001b[38;5;241;43m=\u001b[39;49m\u001b[43mresponse_conn\u001b[49m\u001b[43m,\u001b[49m\n\u001b[1;32m    800\u001b[0m \u001b[43m    \u001b[49m\u001b[43mpreload_content\u001b[49m\u001b[38;5;241;43m=\u001b[39;49m\u001b[43mpreload_content\u001b[49m\u001b[43m,\u001b[49m\n\u001b[1;32m    801\u001b[0m \u001b[43m    \u001b[49m\u001b[43mdecode_content\u001b[49m\u001b[38;5;241;43m=\u001b[39;49m\u001b[43mdecode_content\u001b[49m\u001b[43m,\u001b[49m\n\u001b[1;32m    802\u001b[0m \u001b[43m    \u001b[49m\u001b[38;5;241;43m*\u001b[39;49m\u001b[38;5;241;43m*\u001b[39;49m\u001b[43mresponse_kw\u001b[49m\u001b[43m,\u001b[49m\n\u001b[1;32m    803\u001b[0m \u001b[43m\u001b[49m\u001b[43m)\u001b[49m\n\u001b[1;32m    805\u001b[0m \u001b[38;5;66;03m# Everything went great!\u001b[39;00m\n\u001b[1;32m    806\u001b[0m clean_exit \u001b[38;5;241m=\u001b[39m \u001b[38;5;28;01mTrue\u001b[39;00m\n","File \u001b[0;32m/opt/conda/lib/python3.10/site-packages/urllib3/connectionpool.py:467\u001b[0m, in \u001b[0;36mHTTPConnectionPool._make_request\u001b[0;34m(self, conn, method, url, body, headers, retries, timeout, chunked, response_conn, preload_content, decode_content, enforce_content_length)\u001b[0m\n\u001b[1;32m    464\u001b[0m \u001b[38;5;28;01mtry\u001b[39;00m:\n\u001b[1;32m    465\u001b[0m     \u001b[38;5;66;03m# Trigger any extra validation we need to do.\u001b[39;00m\n\u001b[1;32m    466\u001b[0m     \u001b[38;5;28;01mtry\u001b[39;00m:\n\u001b[0;32m--> 467\u001b[0m         \u001b[38;5;28;43mself\u001b[39;49m\u001b[38;5;241;43m.\u001b[39;49m\u001b[43m_validate_conn\u001b[49m\u001b[43m(\u001b[49m\u001b[43mconn\u001b[49m\u001b[43m)\u001b[49m\n\u001b[1;32m    468\u001b[0m     \u001b[38;5;28;01mexcept\u001b[39;00m (SocketTimeout, BaseSSLError) \u001b[38;5;28;01mas\u001b[39;00m e:\n\u001b[1;32m    469\u001b[0m         \u001b[38;5;28mself\u001b[39m\u001b[38;5;241m.\u001b[39m_raise_timeout(err\u001b[38;5;241m=\u001b[39me, url\u001b[38;5;241m=\u001b[39murl, timeout_value\u001b[38;5;241m=\u001b[39mconn\u001b[38;5;241m.\u001b[39mtimeout)\n","File \u001b[0;32m/opt/conda/lib/python3.10/site-packages/urllib3/connectionpool.py:1096\u001b[0m, in \u001b[0;36mHTTPSConnectionPool._validate_conn\u001b[0;34m(self, conn)\u001b[0m\n\u001b[1;32m   1094\u001b[0m \u001b[38;5;66;03m# Force connect early to allow us to validate the connection.\u001b[39;00m\n\u001b[1;32m   1095\u001b[0m \u001b[38;5;28;01mif\u001b[39;00m conn\u001b[38;5;241m.\u001b[39mis_closed:\n\u001b[0;32m-> 1096\u001b[0m     \u001b[43mconn\u001b[49m\u001b[38;5;241;43m.\u001b[39;49m\u001b[43mconnect\u001b[49m\u001b[43m(\u001b[49m\u001b[43m)\u001b[49m\n\u001b[1;32m   1098\u001b[0m \u001b[38;5;28;01mif\u001b[39;00m \u001b[38;5;129;01mnot\u001b[39;00m conn\u001b[38;5;241m.\u001b[39mis_verified:\n\u001b[1;32m   1099\u001b[0m     warnings\u001b[38;5;241m.\u001b[39mwarn(\n\u001b[1;32m   1100\u001b[0m         (\n\u001b[1;32m   1101\u001b[0m             \u001b[38;5;124mf\u001b[39m\u001b[38;5;124m\"\u001b[39m\u001b[38;5;124mUnverified HTTPS request is being made to host \u001b[39m\u001b[38;5;124m'\u001b[39m\u001b[38;5;132;01m{\u001b[39;00mconn\u001b[38;5;241m.\u001b[39mhost\u001b[38;5;132;01m}\u001b[39;00m\u001b[38;5;124m'\u001b[39m\u001b[38;5;124m. \u001b[39m\u001b[38;5;124m\"\u001b[39m\n\u001b[0;32m   (...)\u001b[0m\n\u001b[1;32m   1106\u001b[0m         InsecureRequestWarning,\n\u001b[1;32m   1107\u001b[0m     )\n","File \u001b[0;32m/opt/conda/lib/python3.10/site-packages/urllib3/connection.py:611\u001b[0m, in \u001b[0;36mHTTPSConnection.connect\u001b[0;34m(self)\u001b[0m\n\u001b[1;32m    609\u001b[0m \u001b[38;5;28;01mdef\u001b[39;00m \u001b[38;5;21mconnect\u001b[39m(\u001b[38;5;28mself\u001b[39m) \u001b[38;5;241m-\u001b[39m\u001b[38;5;241m>\u001b[39m \u001b[38;5;28;01mNone\u001b[39;00m:\n\u001b[1;32m    610\u001b[0m     sock: socket\u001b[38;5;241m.\u001b[39msocket \u001b[38;5;241m|\u001b[39m ssl\u001b[38;5;241m.\u001b[39mSSLSocket\n\u001b[0;32m--> 611\u001b[0m     \u001b[38;5;28mself\u001b[39m\u001b[38;5;241m.\u001b[39msock \u001b[38;5;241m=\u001b[39m sock \u001b[38;5;241m=\u001b[39m \u001b[38;5;28;43mself\u001b[39;49m\u001b[38;5;241;43m.\u001b[39;49m\u001b[43m_new_conn\u001b[49m\u001b[43m(\u001b[49m\u001b[43m)\u001b[49m\n\u001b[1;32m    612\u001b[0m     server_hostname: \u001b[38;5;28mstr\u001b[39m \u001b[38;5;241m=\u001b[39m \u001b[38;5;28mself\u001b[39m\u001b[38;5;241m.\u001b[39mhost\n\u001b[1;32m    613\u001b[0m     tls_in_tls \u001b[38;5;241m=\u001b[39m \u001b[38;5;28;01mFalse\u001b[39;00m\n","File \u001b[0;32m/opt/conda/lib/python3.10/site-packages/urllib3/connection.py:203\u001b[0m, in \u001b[0;36mHTTPConnection._new_conn\u001b[0;34m(self)\u001b[0m\n\u001b[1;32m    198\u001b[0m \u001b[38;5;250m\u001b[39m\u001b[38;5;124;03m\"\"\"Establish a socket connection and set nodelay settings on it.\u001b[39;00m\n\u001b[1;32m    199\u001b[0m \n\u001b[1;32m    200\u001b[0m \u001b[38;5;124;03m:return: New socket connection.\u001b[39;00m\n\u001b[1;32m    201\u001b[0m \u001b[38;5;124;03m\"\"\"\u001b[39;00m\n\u001b[1;32m    202\u001b[0m \u001b[38;5;28;01mtry\u001b[39;00m:\n\u001b[0;32m--> 203\u001b[0m     sock \u001b[38;5;241m=\u001b[39m \u001b[43mconnection\u001b[49m\u001b[38;5;241;43m.\u001b[39;49m\u001b[43mcreate_connection\u001b[49m\u001b[43m(\u001b[49m\n\u001b[1;32m    204\u001b[0m \u001b[43m        \u001b[49m\u001b[43m(\u001b[49m\u001b[38;5;28;43mself\u001b[39;49m\u001b[38;5;241;43m.\u001b[39;49m\u001b[43m_dns_host\u001b[49m\u001b[43m,\u001b[49m\u001b[43m \u001b[49m\u001b[38;5;28;43mself\u001b[39;49m\u001b[38;5;241;43m.\u001b[39;49m\u001b[43mport\u001b[49m\u001b[43m)\u001b[49m\u001b[43m,\u001b[49m\n\u001b[1;32m    205\u001b[0m \u001b[43m        \u001b[49m\u001b[38;5;28;43mself\u001b[39;49m\u001b[38;5;241;43m.\u001b[39;49m\u001b[43mtimeout\u001b[49m\u001b[43m,\u001b[49m\n\u001b[1;32m    206\u001b[0m \u001b[43m        \u001b[49m\u001b[43msource_address\u001b[49m\u001b[38;5;241;43m=\u001b[39;49m\u001b[38;5;28;43mself\u001b[39;49m\u001b[38;5;241;43m.\u001b[39;49m\u001b[43msource_address\u001b[49m\u001b[43m,\u001b[49m\n\u001b[1;32m    207\u001b[0m \u001b[43m        \u001b[49m\u001b[43msocket_options\u001b[49m\u001b[38;5;241;43m=\u001b[39;49m\u001b[38;5;28;43mself\u001b[39;49m\u001b[38;5;241;43m.\u001b[39;49m\u001b[43msocket_options\u001b[49m\u001b[43m,\u001b[49m\n\u001b[1;32m    208\u001b[0m \u001b[43m    \u001b[49m\u001b[43m)\u001b[49m\n\u001b[1;32m    209\u001b[0m \u001b[38;5;28;01mexcept\u001b[39;00m socket\u001b[38;5;241m.\u001b[39mgaierror \u001b[38;5;28;01mas\u001b[39;00m e:\n\u001b[1;32m    210\u001b[0m     \u001b[38;5;28;01mraise\u001b[39;00m NameResolutionError(\u001b[38;5;28mself\u001b[39m\u001b[38;5;241m.\u001b[39mhost, \u001b[38;5;28mself\u001b[39m, e) \u001b[38;5;28;01mfrom\u001b[39;00m \u001b[38;5;21;01me\u001b[39;00m\n","\u001b[0;31mKeyboardInterrupt\u001b[0m: "],"ename":"KeyboardInterrupt","evalue":"","output_type":"error"}]},{"cell_type":"code","source":"# Passar os dados do dataframe hub_df para um geodataframe normalizando a coluna de coordenadas criada pela geocodificação reversa\nhub_geodata_df = pd.json_normalize(hub_df[\"geodata\"].apply(lambda data: data.raw))\nhub_geodata_df.head()","metadata":{"execution":{"iopub.status.busy":"2024-08-07T14:02:07.525423Z","iopub.execute_input":"2024-08-07T14:02:07.525847Z","iopub.status.idle":"2024-08-07T14:02:07.670007Z","shell.execute_reply.started":"2024-08-07T14:02:07.525814Z","shell.execute_reply":"2024-08-07T14:02:07.668033Z"},"trusted":true},"execution_count":73,"outputs":[{"traceback":["\u001b[0;31m---------------------------------------------------------------------------\u001b[0m","\u001b[0;31mAttributeError\u001b[0m                            Traceback (most recent call last)","Cell \u001b[0;32mIn[73], line 2\u001b[0m\n\u001b[1;32m      1\u001b[0m \u001b[38;5;66;03m# Passar os dados do dataframe hub_df para um geodataframe normalizando a coluna de coordenadas criada pela geocodificação reversa\u001b[39;00m\n\u001b[0;32m----> 2\u001b[0m hub_geodata_df \u001b[38;5;241m=\u001b[39m pd\u001b[38;5;241m.\u001b[39mjson_normalize(\u001b[43mhub_df\u001b[49m\u001b[43m[\u001b[49m\u001b[38;5;124;43m\"\u001b[39;49m\u001b[38;5;124;43mgeodata\u001b[39;49m\u001b[38;5;124;43m\"\u001b[39;49m\u001b[43m]\u001b[49m\u001b[38;5;241;43m.\u001b[39;49m\u001b[43mapply\u001b[49m\u001b[43m(\u001b[49m\u001b[38;5;28;43;01mlambda\u001b[39;49;00m\u001b[43m \u001b[49m\u001b[43mdata\u001b[49m\u001b[43m:\u001b[49m\u001b[43m \u001b[49m\u001b[43mdata\u001b[49m\u001b[38;5;241;43m.\u001b[39;49m\u001b[43mraw\u001b[49m\u001b[43m)\u001b[49m)\n\u001b[1;32m      3\u001b[0m hub_geodata_df\u001b[38;5;241m.\u001b[39mhead()\n","File \u001b[0;32m/opt/conda/lib/python3.10/site-packages/pandas/core/series.py:4924\u001b[0m, in \u001b[0;36mSeries.apply\u001b[0;34m(self, func, convert_dtype, args, by_row, **kwargs)\u001b[0m\n\u001b[1;32m   4789\u001b[0m \u001b[38;5;28;01mdef\u001b[39;00m \u001b[38;5;21mapply\u001b[39m(\n\u001b[1;32m   4790\u001b[0m     \u001b[38;5;28mself\u001b[39m,\n\u001b[1;32m   4791\u001b[0m     func: AggFuncType,\n\u001b[0;32m   (...)\u001b[0m\n\u001b[1;32m   4796\u001b[0m     \u001b[38;5;241m*\u001b[39m\u001b[38;5;241m*\u001b[39mkwargs,\n\u001b[1;32m   4797\u001b[0m ) \u001b[38;5;241m-\u001b[39m\u001b[38;5;241m>\u001b[39m DataFrame \u001b[38;5;241m|\u001b[39m Series:\n\u001b[1;32m   4798\u001b[0m \u001b[38;5;250m    \u001b[39m\u001b[38;5;124;03m\"\"\"\u001b[39;00m\n\u001b[1;32m   4799\u001b[0m \u001b[38;5;124;03m    Invoke function on values of Series.\u001b[39;00m\n\u001b[1;32m   4800\u001b[0m \n\u001b[0;32m   (...)\u001b[0m\n\u001b[1;32m   4915\u001b[0m \u001b[38;5;124;03m    dtype: float64\u001b[39;00m\n\u001b[1;32m   4916\u001b[0m \u001b[38;5;124;03m    \"\"\"\u001b[39;00m\n\u001b[1;32m   4917\u001b[0m     \u001b[38;5;28;01mreturn\u001b[39;00m \u001b[43mSeriesApply\u001b[49m\u001b[43m(\u001b[49m\n\u001b[1;32m   4918\u001b[0m \u001b[43m        \u001b[49m\u001b[38;5;28;43mself\u001b[39;49m\u001b[43m,\u001b[49m\n\u001b[1;32m   4919\u001b[0m \u001b[43m        \u001b[49m\u001b[43mfunc\u001b[49m\u001b[43m,\u001b[49m\n\u001b[1;32m   4920\u001b[0m \u001b[43m        \u001b[49m\u001b[43mconvert_dtype\u001b[49m\u001b[38;5;241;43m=\u001b[39;49m\u001b[43mconvert_dtype\u001b[49m\u001b[43m,\u001b[49m\n\u001b[1;32m   4921\u001b[0m \u001b[43m        \u001b[49m\u001b[43mby_row\u001b[49m\u001b[38;5;241;43m=\u001b[39;49m\u001b[43mby_row\u001b[49m\u001b[43m,\u001b[49m\n\u001b[1;32m   4922\u001b[0m \u001b[43m        \u001b[49m\u001b[43margs\u001b[49m\u001b[38;5;241;43m=\u001b[39;49m\u001b[43margs\u001b[49m\u001b[43m,\u001b[49m\n\u001b[1;32m   4923\u001b[0m \u001b[43m        \u001b[49m\u001b[43mkwargs\u001b[49m\u001b[38;5;241;43m=\u001b[39;49m\u001b[43mkwargs\u001b[49m\u001b[43m,\u001b[49m\n\u001b[0;32m-> 4924\u001b[0m \u001b[43m    \u001b[49m\u001b[43m)\u001b[49m\u001b[38;5;241;43m.\u001b[39;49m\u001b[43mapply\u001b[49m\u001b[43m(\u001b[49m\u001b[43m)\u001b[49m\n","File \u001b[0;32m/opt/conda/lib/python3.10/site-packages/pandas/core/apply.py:1427\u001b[0m, in \u001b[0;36mSeriesApply.apply\u001b[0;34m(self)\u001b[0m\n\u001b[1;32m   1424\u001b[0m     \u001b[38;5;28;01mreturn\u001b[39;00m \u001b[38;5;28mself\u001b[39m\u001b[38;5;241m.\u001b[39mapply_compat()\n\u001b[1;32m   1426\u001b[0m \u001b[38;5;66;03m# self.func is Callable\u001b[39;00m\n\u001b[0;32m-> 1427\u001b[0m \u001b[38;5;28;01mreturn\u001b[39;00m \u001b[38;5;28;43mself\u001b[39;49m\u001b[38;5;241;43m.\u001b[39;49m\u001b[43mapply_standard\u001b[49m\u001b[43m(\u001b[49m\u001b[43m)\u001b[49m\n","File \u001b[0;32m/opt/conda/lib/python3.10/site-packages/pandas/core/apply.py:1507\u001b[0m, in \u001b[0;36mSeriesApply.apply_standard\u001b[0;34m(self)\u001b[0m\n\u001b[1;32m   1501\u001b[0m \u001b[38;5;66;03m# row-wise access\u001b[39;00m\n\u001b[1;32m   1502\u001b[0m \u001b[38;5;66;03m# apply doesn't have a `na_action` keyword and for backward compat reasons\u001b[39;00m\n\u001b[1;32m   1503\u001b[0m \u001b[38;5;66;03m# we need to give `na_action=\"ignore\"` for categorical data.\u001b[39;00m\n\u001b[1;32m   1504\u001b[0m \u001b[38;5;66;03m# TODO: remove the `na_action=\"ignore\"` when that default has been changed in\u001b[39;00m\n\u001b[1;32m   1505\u001b[0m \u001b[38;5;66;03m#  Categorical (GH51645).\u001b[39;00m\n\u001b[1;32m   1506\u001b[0m action \u001b[38;5;241m=\u001b[39m \u001b[38;5;124m\"\u001b[39m\u001b[38;5;124mignore\u001b[39m\u001b[38;5;124m\"\u001b[39m \u001b[38;5;28;01mif\u001b[39;00m \u001b[38;5;28misinstance\u001b[39m(obj\u001b[38;5;241m.\u001b[39mdtype, CategoricalDtype) \u001b[38;5;28;01melse\u001b[39;00m \u001b[38;5;28;01mNone\u001b[39;00m\n\u001b[0;32m-> 1507\u001b[0m mapped \u001b[38;5;241m=\u001b[39m \u001b[43mobj\u001b[49m\u001b[38;5;241;43m.\u001b[39;49m\u001b[43m_map_values\u001b[49m\u001b[43m(\u001b[49m\n\u001b[1;32m   1508\u001b[0m \u001b[43m    \u001b[49m\u001b[43mmapper\u001b[49m\u001b[38;5;241;43m=\u001b[39;49m\u001b[43mcurried\u001b[49m\u001b[43m,\u001b[49m\u001b[43m \u001b[49m\u001b[43mna_action\u001b[49m\u001b[38;5;241;43m=\u001b[39;49m\u001b[43maction\u001b[49m\u001b[43m,\u001b[49m\u001b[43m \u001b[49m\u001b[43mconvert\u001b[49m\u001b[38;5;241;43m=\u001b[39;49m\u001b[38;5;28;43mself\u001b[39;49m\u001b[38;5;241;43m.\u001b[39;49m\u001b[43mconvert_dtype\u001b[49m\n\u001b[1;32m   1509\u001b[0m \u001b[43m\u001b[49m\u001b[43m)\u001b[49m\n\u001b[1;32m   1511\u001b[0m \u001b[38;5;28;01mif\u001b[39;00m \u001b[38;5;28mlen\u001b[39m(mapped) \u001b[38;5;129;01mand\u001b[39;00m \u001b[38;5;28misinstance\u001b[39m(mapped[\u001b[38;5;241m0\u001b[39m], ABCSeries):\n\u001b[1;32m   1512\u001b[0m     \u001b[38;5;66;03m# GH#43986 Need to do list(mapped) in order to get treated as nested\u001b[39;00m\n\u001b[1;32m   1513\u001b[0m     \u001b[38;5;66;03m#  See also GH#25959 regarding EA support\u001b[39;00m\n\u001b[1;32m   1514\u001b[0m     \u001b[38;5;28;01mreturn\u001b[39;00m obj\u001b[38;5;241m.\u001b[39m_constructor_expanddim(\u001b[38;5;28mlist\u001b[39m(mapped), index\u001b[38;5;241m=\u001b[39mobj\u001b[38;5;241m.\u001b[39mindex)\n","File \u001b[0;32m/opt/conda/lib/python3.10/site-packages/pandas/core/base.py:921\u001b[0m, in \u001b[0;36mIndexOpsMixin._map_values\u001b[0;34m(self, mapper, na_action, convert)\u001b[0m\n\u001b[1;32m    918\u001b[0m \u001b[38;5;28;01mif\u001b[39;00m \u001b[38;5;28misinstance\u001b[39m(arr, ExtensionArray):\n\u001b[1;32m    919\u001b[0m     \u001b[38;5;28;01mreturn\u001b[39;00m arr\u001b[38;5;241m.\u001b[39mmap(mapper, na_action\u001b[38;5;241m=\u001b[39mna_action)\n\u001b[0;32m--> 921\u001b[0m \u001b[38;5;28;01mreturn\u001b[39;00m \u001b[43malgorithms\u001b[49m\u001b[38;5;241;43m.\u001b[39;49m\u001b[43mmap_array\u001b[49m\u001b[43m(\u001b[49m\u001b[43marr\u001b[49m\u001b[43m,\u001b[49m\u001b[43m \u001b[49m\u001b[43mmapper\u001b[49m\u001b[43m,\u001b[49m\u001b[43m \u001b[49m\u001b[43mna_action\u001b[49m\u001b[38;5;241;43m=\u001b[39;49m\u001b[43mna_action\u001b[49m\u001b[43m,\u001b[49m\u001b[43m \u001b[49m\u001b[43mconvert\u001b[49m\u001b[38;5;241;43m=\u001b[39;49m\u001b[43mconvert\u001b[49m\u001b[43m)\u001b[49m\n","File \u001b[0;32m/opt/conda/lib/python3.10/site-packages/pandas/core/algorithms.py:1743\u001b[0m, in \u001b[0;36mmap_array\u001b[0;34m(arr, mapper, na_action, convert)\u001b[0m\n\u001b[1;32m   1741\u001b[0m values \u001b[38;5;241m=\u001b[39m arr\u001b[38;5;241m.\u001b[39mastype(\u001b[38;5;28mobject\u001b[39m, copy\u001b[38;5;241m=\u001b[39m\u001b[38;5;28;01mFalse\u001b[39;00m)\n\u001b[1;32m   1742\u001b[0m \u001b[38;5;28;01mif\u001b[39;00m na_action \u001b[38;5;129;01mis\u001b[39;00m \u001b[38;5;28;01mNone\u001b[39;00m:\n\u001b[0;32m-> 1743\u001b[0m     \u001b[38;5;28;01mreturn\u001b[39;00m \u001b[43mlib\u001b[49m\u001b[38;5;241;43m.\u001b[39;49m\u001b[43mmap_infer\u001b[49m\u001b[43m(\u001b[49m\u001b[43mvalues\u001b[49m\u001b[43m,\u001b[49m\u001b[43m \u001b[49m\u001b[43mmapper\u001b[49m\u001b[43m,\u001b[49m\u001b[43m \u001b[49m\u001b[43mconvert\u001b[49m\u001b[38;5;241;43m=\u001b[39;49m\u001b[43mconvert\u001b[49m\u001b[43m)\u001b[49m\n\u001b[1;32m   1744\u001b[0m \u001b[38;5;28;01melse\u001b[39;00m:\n\u001b[1;32m   1745\u001b[0m     \u001b[38;5;28;01mreturn\u001b[39;00m lib\u001b[38;5;241m.\u001b[39mmap_infer_mask(\n\u001b[1;32m   1746\u001b[0m         values, mapper, mask\u001b[38;5;241m=\u001b[39misna(values)\u001b[38;5;241m.\u001b[39mview(np\u001b[38;5;241m.\u001b[39muint8), convert\u001b[38;5;241m=\u001b[39mconvert\n\u001b[1;32m   1747\u001b[0m     )\n","File \u001b[0;32mlib.pyx:2972\u001b[0m, in \u001b[0;36mpandas._libs.lib.map_infer\u001b[0;34m()\u001b[0m\n","Cell \u001b[0;32mIn[73], line 2\u001b[0m, in \u001b[0;36m<lambda>\u001b[0;34m(data)\u001b[0m\n\u001b[1;32m      1\u001b[0m \u001b[38;5;66;03m# Passar os dados do dataframe hub_df para um geodataframe normalizando a coluna de coordenadas criada pela geocodificação reversa\u001b[39;00m\n\u001b[0;32m----> 2\u001b[0m hub_geodata_df \u001b[38;5;241m=\u001b[39m pd\u001b[38;5;241m.\u001b[39mjson_normalize(hub_df[\u001b[38;5;124m\"\u001b[39m\u001b[38;5;124mgeodata\u001b[39m\u001b[38;5;124m\"\u001b[39m]\u001b[38;5;241m.\u001b[39mapply(\u001b[38;5;28;01mlambda\u001b[39;00m data: \u001b[43mdata\u001b[49m\u001b[38;5;241;43m.\u001b[39;49m\u001b[43mraw\u001b[49m))\n\u001b[1;32m      3\u001b[0m hub_geodata_df\u001b[38;5;241m.\u001b[39mhead()\n","\u001b[0;31mAttributeError\u001b[0m: 'NoneType' object has no attribute 'raw'"],"ename":"AttributeError","evalue":"'NoneType' object has no attribute 'raw'","output_type":"error"}]},{"cell_type":"code","source":"# Organizar as colunas com as informações extraídas selecionando apenas o bairro (suburb) e a cidade (city)\nhub_geodata_df = hub_geodata_df[[\"address.town\", \"address.suburb\", \"address.city\"]]\nhub_geodata_df.rename(columns={\"address.town\": \"hub_town\", \"address.suburb\": \"hub_suburb\", \"address.city\": \"hub_city\"}, inplace=True)\nhub_geodata_df[\"hub_city\"] = np.where(hub_geodata_df[\"hub_city\"].notna(), hub_geodata_df[\"hub_city\"], hub_geodata_df[\"hub_town\"])\nhub_geodata_df[\"hub_suburb\"] = np.where(hub_geodata_df[\"hub_suburb\"].notna(), hub_geodata_df[\"hub_suburb\"], hub_geodata_df[\"hub_city\"])\nhub_geodata_df = hub_geodata_df.drop(\"hub_town\", axis=1)\n\nhub.geodata_df.head()","metadata":{},"execution_count":null,"outputs":[]},{"cell_type":"markdown","source":"O DataFrame `hub_geodata_df` com as informações de **cidade** e **bairro** é então combinado ao DataFrame principal `deliveries_df`, enriquecendo assim o dado.","metadata":{}},{"cell_type":"code","source":"# Devolver o hub_geodata_df para o dataframe principal\nhub_df = pd.merge(left=hub_df, right=hub_geodata_df, left_index=True, right_index=True)\nhub_df = hub_df[[\"region\", \"hub_suburb\", \"hub_city\"]]\nhub_df.head()","metadata":{},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"# Mesclar as informações do dataframe hub reestruturadas com o dataframe de entregas (deliveries_df)\ndeliveries_df = pd.merge(left=deliveries_df, right=hub_df, how=\"inner\", on=\"region\")\ndeliveries_df = deliveries_df[[\"name\", \"region\", \"hub_lng\", \"hub_lat\", \"hub_city\", \"hub_suburb\", \"vehicle_capacity\", \"delivery_size\", \"delivery_lng\", \"delivery_lat\"]]\ndeliveries_df.head()","metadata":{},"execution_count":null,"outputs":[]},{"cell_type":"markdown","source":"Enquanto o **hub** contem apenas **3** geolocalizações distintas, as **entregas** somam o total de **636.149**, o que levaria em torno de 7 dias para serem consultadas no servidor do Nominatim, dada a restrição de uma consulta por segundo. Por isso para as entregas será feita a inclusão dos dados de Geocodificação reversa já processados anteriormente pela Ebac e disponibilizadas em um arquivo `csv`. Abaixo faremos a importação do arquivo para um dataframe chamado `deliveries_geodata_df`.","metadata":{}},{"cell_type":"code","source":"# Abrir arquivo com a geocodificação reversa das entregas já processadas e passando para um dataframe\ndeliveries_geodata_df = pd.read_csv(\"../input/loggi-data/deliveries-geodata.csv\")\ndeliveries_geodata_df.head()","metadata":{"execution":{"iopub.status.busy":"2024-08-06T17:01:16.843575Z","iopub.execute_input":"2024-08-06T17:01:16.844085Z","iopub.status.idle":"2024-08-06T17:01:17.471093Z","shell.execute_reply.started":"2024-08-06T17:01:16.844034Z","shell.execute_reply":"2024-08-06T17:01:17.469097Z"},"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"# Juntar dataframes\ndeliveries_df = pd.merge(left=deliveries_df, right=deliveries_geodata_df[[\"delivery_city\", \"delivery_suburb\"]], how=\"inner\", left_index=True, right_index=True)\n\ndeliveries_df.head()","metadata":{},"execution_count":null,"outputs":[]},{"cell_type":"markdown","source":"#### 4.2 Qualidade\n\nAqui será analisada a qualidade dos dados para de avaliar a consistência do schema.","metadata":{}},{"cell_type":"code","source":"# Visualizar informações sobre o dataframe deliveries_df\ndeliveries_df.info()","metadata":{},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"# Verificar dados faltantes\ndeliveries_df.isna().any()","metadata":{},"execution_count":null,"outputs":[]},{"cell_type":"markdown","source":"Verificação dos dados de Geocodificação reversa","metadata":{}},{"cell_type":"code","source":"# Proporção (%) de nomes faltantes de cidades das entregas (delivery_city)\n100 * (deliveries_df[\"delivery_city\"].isna().sum() / len(deliveries_df))","metadata":{},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"# Proporção (%) de nomes faltantes de bairros das entregas (delivery_suburb)\n100 * (deliveries_df[\"delivery_suburb\"].isna().sum() / len(deliveries_df))","metadata":{},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"# Valores exclusivos de cidades de entregas (delivery_city)\nprop_df = deliveries_df[[\"delivery_city\"]].value_counts() / len(deliveries_df)\nprop_df.sort_values(ascending=False).head(10)","metadata":{},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"# Valores exclusivos de bairros de entregas (delivery_suburb)\nprop_df = deliveries_df[[\"delivery_suburb\"]].value_counts() / len(deliveries_df)\nprop_df.sort_values(ascending=False).head(10)","metadata":{},"execution_count":null,"outputs":[]},{"cell_type":"markdown","source":"## 5\\. Visualização","metadata":{"id":"KSgjP--1JS9R"}},{"cell_type":"markdown","source":"#### 5.1 Mapa de entregas por região\n\nVamos a partir daqui criar o mapa utilizando o pacote Python Geopandas ([link](https://geopandas.org/) da documentação) para visualizar as coordenadas dos **hubs** e das **entregas** no mapa do Distrito Federal, segmentados pela região dos **hubs**.","metadata":{}},{"cell_type":"markdown","source":" - **Mapa do Distrito Federal**\n \nAgora vamos fazer a leitura dos dados do mapa do Distrito Federal. Ele foi importado mas o arquivo original é disponibilizado no site oficial do IBGE através do seguinte [link](https://www.ibge.gov.br/geociencias/cartas-e-mapas/bases-cartograficas-continuas). \nA partir do arquivo lido `df.shp` vamos criar o dataframe `mapa`. Note a coluna `geometry`.","metadata":{}},{"cell_type":"code","source":"# Ler arquivos shapefile do Distrito Federal\nmapa = gpd.read_file('../input/loggi-data/df.shp')\nmapa = mapa.loc[[0]]\nmapa.head()","metadata":{"execution":{"iopub.status.busy":"2024-08-07T13:46:17.224427Z","iopub.execute_input":"2024-08-07T13:46:17.224838Z","iopub.status.idle":"2024-08-07T13:46:17.523408Z","shell.execute_reply.started":"2024-08-07T13:46:17.224805Z","shell.execute_reply":"2024-08-07T13:46:17.521970Z"},"trusted":true},"execution_count":46,"outputs":[{"execution_count":46,"output_type":"execute_result","data":{"text/plain":"   ID_ANTIGO              NOME         NOMEABREV GEOMETRIAA SIGLA GEOCODIGO  \\\n0        461  Distrito Federal  Distrito Federal       None    DF        53   \n\n  TX_COMENTA ID_PRODUTO ID_ELEMENT  \\\n0       None       None       None   \n\n                                            geometry  \n0  POLYGON Z ((-47.31048 -16.03602 0.00000, -47.3...  ","text/html":"<div>\n<style scoped>\n    .dataframe tbody tr th:only-of-type {\n        vertical-align: middle;\n    }\n\n    .dataframe tbody tr th {\n        vertical-align: top;\n    }\n\n    .dataframe thead th {\n        text-align: right;\n    }\n</style>\n<table border=\"1\" class=\"dataframe\">\n  <thead>\n    <tr style=\"text-align: right;\">\n      <th></th>\n      <th>ID_ANTIGO</th>\n      <th>NOME</th>\n      <th>NOMEABREV</th>\n      <th>GEOMETRIAA</th>\n      <th>SIGLA</th>\n      <th>GEOCODIGO</th>\n      <th>TX_COMENTA</th>\n      <th>ID_PRODUTO</th>\n      <th>ID_ELEMENT</th>\n      <th>geometry</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <th>0</th>\n      <td>461</td>\n      <td>Distrito Federal</td>\n      <td>Distrito Federal</td>\n      <td>None</td>\n      <td>DF</td>\n      <td>53</td>\n      <td>None</td>\n      <td>None</td>\n      <td>None</td>\n      <td>POLYGON Z ((-47.31048 -16.03602 0.00000, -47.3...</td>\n    </tr>\n  </tbody>\n</table>\n</div>"},"metadata":{}}]},{"cell_type":"markdown","source":" - **Mapa dos Hubs**\n \n Vamos criar o DataFrame `geo_hub_df` através do DataFrame `deliveries_df`. Note a nova coluna `geometry`.","metadata":{}},{"cell_type":"code","source":"# Criar um geo dataframe dos hubs\nhub_df = deliveries_df[[\"region\", \"hub_lng\", \"hub_lat\"]].drop_duplicates().reset_index(drop=True)\ngeo_hub_df = gpd.GeoDataFrame(hub_df, geometry=gpd.points_from_xy(hub_df[\"hub_lng\"], hub_df[\"hub_lat\"]))\ngeo_hub_df.head()","metadata":{"id":"Jlj3ACWCJS9R"},"execution_count":null,"outputs":[]},{"cell_type":"markdown","source":" - **Mapa das Entregas**\n \n Vamos criar o DataFrame `geo_deliveries_df` através do DataFrame `deliveries_df`. Note a nova coluna `geometry`.","metadata":{}},{"cell_type":"code","source":"# Criar um geo dataframe das entregas\ngeo_deliveries_df = gpd.GeoDataFrame(deliveries_df, geometry=gpd.points_from_xy(deliveries_df[\"delivery_lng\"], deliveries_df[\"delivery_lat\"]))\ngeo_deliveries_df.head()","metadata":{},"execution_count":null,"outputs":[]},{"cell_type":"markdown","source":" - **Visualização**\n \n Agora vamos definir as propriedades necessárias para gerar o gráfico do mapa.","metadata":{}},{"cell_type":"code","source":"# Criar o plot vazio\nfig, ax = plt.subplots(figsize = (50/2.54, 50/2.54))\n\n# Plot mapa do Distrito Federal\nmapa.plot(ax=ax, alpha=0.4, color=\"lightgrey\")\n\n# Plot das entregas\ngeo_deliveries_df.query(\"region == 'df-0'\").plot(ax=ax, markersize=1, color=\"red\", label=\"df-0\")\ngeo_deliveries_df.query(\"region == 'df-1'\").plot(ax=ax, markersize=1, color=\"blue\", label=\"df-1\")\ngeo_deliveries_df.query(\"region == 'df-2'\").plot(ax=ax, markersize=1, color=\"seagreen\", label=\"df-2\")\n\n# Plot dos hubs\ngeo_hub_df.plot(ax=ax, markersize=30, marker=\"x\", color=\"black\", label=\"hub\")\n\n# Plot da legenda\nplt.title(\"Entregas no Distrito Federal por Região\", fontdict={\"fontsize\": 16})\nlgnd = plt.legend(prop={\"size\": 15})\nfor handle in lgnd.legend_handles:\n    handle.set_sizes([50])","metadata":{},"execution_count":null,"outputs":[]},{"cell_type":"markdown","source":"#### Insights:\n\nObservando o gráfico, é possível notar que os **hubs** estão bem centralizados em relação às entregas feitas a partir deles. A distribuição foi bem estruturada. No **hub** `df0`, as entregas são mais distantes e espalhadas, enquanto no **hub** `df1` elas são mais centralizadas e densas. O **hub** `df2` apresenta uma alta densidade de entregas nas proximidades, mas também possui algumas entregas mais distantes, sugerindo uma localidade com características híbridas, combinando aspectos dos hubs `df0` e `df1`.","metadata":{}},{"cell_type":"markdown","source":"#### 5.2 Gráfico de entregas por região\n\nVamos a partir daqui criar um gráfico de barras utilizando a biblioteca Seaborn com o ituito mostrar a proporção de entregas em cada região.","metadata":{}},{"cell_type":"markdown","source":" - **Agregação**:","metadata":{}},{"cell_type":"code","source":"# Criar um DataFrame com as colunas 'region' e 'vehicle_capacity', calculando a proporção de entregas por região\ndata = pd.DataFrame(deliveries_df[[\"region\", \"vehicle_capacity\"]].value_counts(normalize=True)).reset_index()\ndata.rename(columns={0: \"region_percent\"}, inplace=True)\ndata.head()","metadata":{"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"markdown","source":" - **Visualização**:","metadata":{}},{"cell_type":"code","source":"# Configurar o estilo do gráfico e visualizar\n\n# Criar gráfico de pizza\nplt.figure(figsize=(8, 8))\nplt.pie(data['proportion'], labels=data['region'], autopct='%1.1f%%', startangle=140)\nplt.title(\"Proporção de Entregas por Região\", fontdict={\"fontsize\": 16})\n\n# Exibir\nplt.show()","metadata":{},"execution_count":null,"outputs":[]},{"cell_type":"markdown","source":"#### Insights:\n\nAo observar o gráfico de segmentos, é possível notar que o volume de entregas para os **hubs** `df-1` e `df-2` é significativamente maior em comparação ao `df-0`. No entanto, considerando que as entregas para o **hub** `df-0` são mais distantes em relação aos outros **hubs**, conforme indicado no gráfico anterior, essa diferença no volume de entregas pode ser justificada.","metadata":{}}]}